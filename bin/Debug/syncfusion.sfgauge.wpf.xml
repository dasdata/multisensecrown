<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Syncfusion.SfGauge.WPF</name>
    </assembly>
    <members>
        <member name="T:Syncfusion.UI.Xaml.Gauges.GaugeAnnotation">
            <summary>
            Represents the gauge annotation. To render this annotation, create an instance <see cref="T:Syncfusion.UI.Xaml.Gauges.GaugeAnnotation"/>, and set required properties.
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Gauges.GaugeAnnotation.OnAnnotationPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            TO update the annotation properties.
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Gauges.GaugeAnnotation.Update">
            <summary>
            To update the Annotation position.
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Gauges.GaugeAnnotation.Dispose">
            <summary>
            To dispose the events and content.
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Gauges.GaugeAnnotation.OnGaugeAnnotationSizeChanged(System.Object,System.Windows.SizeChangedEventArgs)">
            <summary>
            To update the annotation after changing the size.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Gauges.GaugeAnnotation.Gauge">
            <summary>
            To get the gauge instance.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Gauges.GaugeAnnotation.AvailableSize">
            <summary>
            Gets or Sets the gauge available size.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Gauges.GaugeAnnotation.Angle">
            <summary>
            Gets or sets the Angle value for annotation. It is used to place the Annotation with given angle.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Gauges.GaugeAnnotation.Offset">
            <summary>
            Gets or sets the position of the annotation. It moves the Annotation from the center to edge of the circular gauge. The value should be from 0 and 1.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Gauges.GaugeAnnotation.HorizontalPosition">
            <summary>
            Gets or sets the horizontal position of the annotation. It aligns the annotation to the start, center, or end in horizontal position.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Gauges.GaugeAnnotation.VerticalPosition">
            <summary>
            Gets or sets the vertical position of the annotation. It aligns the annotation to the start, center or end in horizontal position.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Gauges.GaugeAnnotation.ViewMargin">
            <summary>
            Gets or sets the ViewMargin of the annotation. It is used to customize the Annotation x and y position by using the pixel values.
            </summary>
        </member>
        <member name="T:Syncfusion.UI.Xaml.Gauges.CircularGaugeAnnotationCollection">
            <summary>
            Represents the circular gauge annotation collection. Create an instance for this property, and set required properties.
            </summary>
        </member>
        <member name="T:Syncfusion.UI.Xaml.Gauges.SfCircularGauge">
            <summary>
            <para>Represents a control that helps user to visualize the single numerical data.</para>
            <toolboxitem>true</toolboxitem>
            <toolboxvscategory>Syncfusion controls for Metro</toolboxvscategory>
            <toolboxblendcategory>Syncfusion controls for Metro</toolboxblendcategory>
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Gauges.SfCircularGauge.#ctor">
            <summary>
            Initializes a new instance of the <see
            cref="T:Syncfusion.UI.Xaml.Gauges.SfCircularGauge"/> class.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Gauges.SfCircularGauge.gaugeContentPresenter">
            <summary>
            Gets or sets the main scale element
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Gauges.SfCircularGauge.OnHeaderContentAlignmentChanged">
            <summary>
            Change the header's content alignment by horizontally and vertically using the header position.
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Gauges.SfCircularGauge.OnApplyTemplate">
            <summary>
            When overridden in a derived class, is invoked whenever application code or internal processes call ApplyTemplate.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Gauges.SfCircularGauge.mainScale">
            <summary>
            <para>Gets or sets the MainScale that specifies basic look and feel of Circular Gauge.</para>
            </summary>
            <remarks>
            Use Scales Property of CircularGauge to add CircularScale instead of using MainScale and SubScales Properties.
            </remarks>
            <value>
            CircularScale
            </value>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Gauges.SfCircularGauge.OnSpacingMarginPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            To update the spacing margin value.
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Gauges.SfCircularGauge.OnAnnotationsPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            To raise the annotation CollectionChanged event.
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Gauges.SfCircularGauge.OnAnnotationsCollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            To update annotation collections.
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Gauges.SfCircularGauge.Dispose">
            <summary>
            Method to release allocated resources of SfCircularGauge.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Gauges.SfCircularGauge.ActualCenter">
            <summary>
            Gets or sets the center of the gauge based on the sweep angle.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Gauges.SfCircularGauge.DiffInRadius">
            <summary>
            Gets or sets the value of difference in radius
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Gauges.SfCircularGauge.HeaderAlignment">
            <summary>
            Gets or sets the alignments of the GaugeHeader of the SfCircularGauge.
            </summary>
            <value>
            HeaderAlignment
            </value>
            <example>
            <code language="C#">
            using System;
            using System.Collections.Generic;
            using System.IO;
            using System.Linq;
            using Windows.Foundation;
            using Windows.Foundation.Collections;
            using Windows.UI.Xaml;
            using Windows.UI.Xaml.Controls;
            using Windows.UI.Xaml.Controls.Primitives;
            using Windows.UI.Xaml.Data;
            using Windows.UI.Xaml.Input;
            using Windows.UI.Xaml.Media;
            using Windows.UI.Xaml.Navigation;
            using Common;
            using Syncfusion.UI.Xaml.Gauges;
            
            namespace GaugeWinRTSamples
            {
                public sealed partial class GaugePosition :SampleView
                {
                    public GaugePosition()
                    {
                       InitializeComponent();
                       SfCircularGauge gauge = new SfCircularGauge();
                       gauge.GaugeHeader = "Syncfusion";
                       gauge.HeaderAlignment=HeaderAlignment.Center;
                    }
                }
            }
            
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Gauges.SfCircularGauge.GaugeHeader">
            <summary>
            Gets or sets the header for CircularGauge.
            </summary>
            <value>
            Object
            </value>
            <example>
            <code language="C#">
            using System;
            using System.Collections.Generic;
            using System.IO;
            using System.Linq;
            using Windows.Foundation;
            using Windows.Foundation.Collections;
            using Windows.UI.Xaml;
            using Windows.UI.Xaml.Controls;
            using Windows.UI.Xaml.Controls.Primitives;
            using Windows.UI.Xaml.Data;
            using Windows.UI.Xaml.Input;
            using Windows.UI.Xaml.Media;
            using Windows.UI.Xaml.Navigation;
            using Common;
            using Syncfusion.UI.Xaml.Gauges;
            
            namespace GaugeWinRTSamples
            {
                public sealed partial class GaugePosition :SampleView
                {
                    public GaugePosition()
                    {
                       InitializeComponent();
                       SfCircularGauge gauge = new SfCircularGauge();
                       gauge.GaugeHeader = "Syncfusion";
                    }
                }
            }
            
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Gauges.SfCircularGauge.GaugeType">
            <summary>
            Gets or sets the type of CircularGauge.
            </summary>
            <value>
            Object
            </value>
            <example>
            <code language="C#">
            using System;
            using System.Collections.Generic;
            using System.IO;
            using System.Linq;
            using Windows.Foundation;
            using Windows.Foundation.Collections;
            using Windows.UI.Xaml;
            using Windows.UI.Xaml.Controls;
            using Windows.UI.Xaml.Controls.Primitives;
            using Windows.UI.Xaml.Data;
            using Windows.UI.Xaml.Input;
            using Windows.UI.Xaml.Media;
            using Windows.UI.Xaml.Navigation;
            using Common;
            using Syncfusion.UI.Xaml.Gauges;
            
            namespace GaugeWinRTSamples
            {
                public sealed partial class GaugePosition :SampleView
                {
                    public GaugePosition()
                    {
                       InitializeComponent();
                       SfCircularGauge gauge = new SfCircularGauge();
                       gauge.GaugeType = CircularGaugeTypes.None;
                    }
                }
            }
            
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Gauges.SfCircularGauge.GaugeHeaderPosition">
            <summary>
            Gets or sets the position of the GaugeHeader of the SfCircularGauge.
            </summary>
            <value>
            Point
            </value>
            <example>
            <code language="C#">
            using System;
            using System.Collections.Generic;
            using System.IO;
            using System.Linq;
            using Windows.Foundation;
            using Windows.Foundation.Collections;
            using Windows.UI.Xaml;
            using Windows.UI.Xaml.Controls;
            using Windows.UI.Xaml.Controls.Primitives;
            using Windows.UI.Xaml.Data;
            using Windows.UI.Xaml.Input;
            using Windows.UI.Xaml.Media;
            using Windows.UI.Xaml.Navigation;
            using Common;
            using Syncfusion.UI.Xaml.Gauges;
            
            namespace GaugeWinRTSamples
            {
                public sealed partial class GaugePosition :SampleView
                {
                    public GaugePosition()
                    {
                       InitializeComponent();
                       SfCircularGauge gauge = new SfCircularGauge();
                       gauge.GaugeHeader = "Syncfusion";
                       gauge.GaugeHeaderPosition = new Point(100, 200);
                    }
                }
            }
            
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Gauges.SfCircularGauge.SubScales">
            <summary>
            Gets or sets the collection of subscales to be added in the same gauge.
            </summary>
            <remarks>
            Use Scales Property of CircularGauge to add CircularScale instead of using MainScale and SubScales Properties.
            </remarks>
            <value>
            ObservableCollection
            </value>
            <example>
            <code language="C#">
            using System;
            using System.Collections.Generic;
            using System.IO;
            using System.Linq;
            using Windows.Foundation;
            using Windows.Foundation.Collections;
            using Windows.UI.Xaml;
            using Windows.UI.Xaml.Controls;
            using Windows.UI.Xaml.Controls.Primitives;
            using Windows.UI.Xaml.Data;
            using Windows.UI.Xaml.Input;
            using Windows.UI.Xaml.Media;
            using Windows.UI.Xaml.Navigation;
            using Common;
            using Syncfusion.UI.Xaml.Gauges;
            
            namespace GaugeWinRTSamples
            {
                public sealed partial class GaugePosition :SampleView
                {
                    public GaugePosition()
                    {
                        InitializeComponent();
                        SfCircularGauge gauge = new SfCircularGauge();
                        CircularScale subScale1 = new CircularScale();
                        CircularScale subScale2 = new CircularScale();
                        subScale1.Height = 300;
                        subScale1.Width = 300;
                        subScale1.StartAngle = 180;
                        subScale1.SweepAngle = 180;
                         subScale1.SweepDirection = SweepDirection.Clockwise;
                         subScale1.StartValue = 0;
                         subScale1.EndValue = 100;
                         subScale1.Height = 200;
                         subScale1.Width = 200;
                         subScale2.StartAngle = 270;
                         subScale2.SweepAngle = 180;
                         subScale2.SweepDirection = SweepDirection.Clockwise;
                         subScale2.StartValue = 0;
                         subScale2.EndValue = 200;
                         gauge.SubScales.Add(subScale1);
                         gauge.SubScales.Add(subScale2);
                        
                    }
                }
            }
            
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Gauges.SfCircularGauge.CircularScaleStyle">
            <summary>
            Gets or sets the style to the CircularScale in the SfCircularGauge.
            </summary>
            <value>
            Style
            </value>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Gauges.SfCircularGauge.SpacingMargin">
            <summary>
            Gets or sets the outer margin of the SfCircularGauge.
            </summary>
            <remarks>
            SpacingMargin property is used to place the SfCircularGauge in the center of the
            container. And also it decides the size of the SfCircularGauge. Value of the property should reside between 0.1 and 1.0.
            The default value is 1.0.
            </remarks>
            <value>
            double
            </value>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Gauges.SfCircularGauge.Scales">
            <summary>
            Gets or sets the collection of Scales to the ciruclar gauge.
            </summary>
            <value>
            CircularScale
            </value> 
            /// <example>
            <code language="C#">
            using System;
            using System.Collections.Generic;
            using System.IO;
            using System.Linq;
            using Windows.Foundation;
            using Windows.Foundation.Collections;
            using Windows.UI.Xaml;
            using Windows.UI.Xaml.Controls;
            using Windows.UI.Xaml.Controls.Primitives;
            using Windows.UI.Xaml.Data;
            using Windows.UI.Xaml.Input;
            using Windows.UI.Xaml.Media;
            using Windows.UI.Xaml.Navigation;
            using Common;
            using Syncfusion.UI.Xaml.Gauges;
            namespace GaugeWinRTSamples
            {
                public sealed partial class GaugePosition :SampleView
                {
                    public GaugePosition()
                    {
                        InitializeComponent();
                      SfCircularGauge gauge = new SfCircularGauge();
                          CircularScale scale = new CircularScale();
                           scale.Height = 300;
                           scale.Width = 300;
                           scale.StartAngle = 180;
                           scale.SweepAngle = 180;
                           scale.StartValue = 0;
                           scale.EndValue = 100;
                           scale.Height = 200;
                           scale.Width = 200;
                           gauge.Scales.Add(scale); 
                        
                    }
                }
            }
            
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Gauges.SfCircularGauge.Annotations">
            <summary>
            Gets or sets the annotations for the circular gauge. It marks the specific area in the circular gauge. This is a bindable property.
            </summary>
            <value>This property takes the <see cref="T:Syncfusion.UI.Xaml.Gauges.CircularGaugeAnnotationCollection"/> as value </value>
        </member>
        <member name="T:Syncfusion.UI.Xaml.Gauges.HeaderAlignment">
            <summary>
            Enumerates the alignments of the header in circular gauge. You can change the alignment of a header using this enum.
            </summary>
        </member>
        <member name="T:Syncfusion.UI.Xaml.Gauges.RangePosition">
            <summary>
            Enumerates the values for position of ranges in the circular gauge. You can change the position of a range using RangePosition.
            </summary>
        </member>
        <member name="T:Syncfusion.UI.Xaml.Gauges.RangeCap">
            <summary>
            Contains values for the RangeCap. It can be used to customize the appearance of the range  cap. 
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Gauges.RangeCap.None">
            <summary>
            Default value. No range cap applied.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Gauges.RangeCap.Start">
            <summary>
            Apply the range cap at range pointer start position
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Gauges.RangeCap.End">
            <summary>
            Apply the range cap at range pointer end position
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Gauges.RangeCap.Both">
            <summary>
             Apply the range cap at range pointer start and end position
            </summary>
        </member>
        <member name="T:Syncfusion.UI.Xaml.Gauges.RangePointerPosition">
            <summary>
            Enumerates the values for position of range pointer in the circular gauge. It changes the position of range pointer position.
            </summary>
        </member>
        <member name="T:Syncfusion.UI.Xaml.Gauges.TickType">
            <summary>
            Enumerates the type of ticks available in the circular gauge.
            </summary>
        </member>
        <member name="T:Syncfusion.UI.Xaml.Gauges.LabelPosition">
            <summary>
            Enumerates the values for position of labels in the circular gauge. You can change the position of labels.
            </summary>
        </member>
        <member name="T:Syncfusion.UI.Xaml.Gauges.TickPosition">
            <summary>
            Enumerates the values for position of ticks in the circular gauge. You can change the position of ticks.
            </summary>
        </member>
        <member name="T:Syncfusion.UI.Xaml.Gauges.TickShape">
            <summary>
            Enumerates the values for shape of ticks in the circular gauge. You can change the shape of ticks.
            </summary>
        </member>
        <member name="T:Syncfusion.UI.Xaml.Gauges.PointerType">
            <summary>
            Enumerates the type of pointers available in the circular gauge. You can set different pointer type for gauge.
            </summary>
        </member>
        <member name="T:Syncfusion.UI.Xaml.Gauges.NeedlePointerType">
            <summary>
            Enumerates the type of needle pointers available in the circular gauge. You can set different pointer type for gauge.
            </summary>
        </member>
        <member name="T:Syncfusion.UI.Xaml.Gauges.NumericScaleType">
            <summary>
            Enumerates the type of numeric scale available in the circular gauge. It is used to change the scale value type.
            </summary>
        </member>
        <member name="T:Syncfusion.UI.Xaml.Gauges.Symbol">
            <summary>
            Enumerates the type of symbol pointer available in the circular gauge. You can change the symbol of a pointer.
            </summary>
        </member>
        <member name="T:Syncfusion.UI.Xaml.Gauges.CircularGaugeTypes">
            <summary>
            Enumerates the types of circular gauge available in the circular gauge. You can change the type of the circular gauge.
            </summary>
        </member>
        <member name="T:Syncfusion.UI.Xaml.Gauges.ViewAlignment">
            <summary>
            Enumerates the values for alignment of annotation in the gauge.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Gauges.ViewAlignment.Start">
            <summary>
            Represents the Start position of Annotation. You can customize the annotation view start position.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Gauges.ViewAlignment.Center">
            <summary>
             Represents the Center position of Annotation. You can customize the annotation view center position.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Gauges.ViewAlignment.End">
            <summary>
            Represents the End position of Annotation. You can customize the annotation view end position.
            </summary>
        </member>
        <member name="T:Syncfusion.UI.Xaml.Gauges.CircularPanel">
            <summary>
            Represents the CircularPanel. To arrange the panel, create an instance of the <see cref="T:Syncfusion.UI.Xaml.Gauges.CircularPanel"/> class, and set required properties.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Gauges.CircularPanel.ScaleMaxWidth">
            <summary>
            Gets or sets ScaleMaxWidth of the CircularPanel which help to position the SfCircularGauge elements.
            </summary>
            <value>
            double
            </value>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Gauges.CircularPanel.SweepDirection">
            <summary>
            Gets or sets SweepDirection of the CircularPanel which decides rendering direction of the CircularScale elements.
            </summary>
            <value>
            SweepDirection
            </value>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Gauges.CircularPanel.SweepAngle">
            <summary>
            Gets or sets SweepAngle of the CircularPanel which decides the shape of the SfCircularGauge.
            </summary>
            <value>
            double
            </value>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Gauges.CircularPanel.StartAngle">
            <summary>
            Gets or sets the StartAngle of the CircularPanel which decides the shape of the SfCircularGauge.
            </summary>
            <value>
            double
            </value>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Gauges.CircularPanel.AngularSpace">
            <summary>
            Gets or sets the AngularSpace between two children of the CircularPanel.
            </summary>
            <value>
            double
            </value>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Gauges.CircularPanel.Labels">
            <summary>
            Gets or sets the collection of labels to the CircularPanel.
            </summary>
        </member>
        <member name="T:Syncfusion.UI.Xaml.Gauges.CircularPointer">
            <summary>
            <para>CircularPointer is a class that includes properties and methods to define
            different types of pointers</para>
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Gauges.CircularPointer.#ctor">
            <summary>
            Initializes a new instance of the <see
            cref="T:Syncfusion.UI.Xaml.Gauges.CircularPointer"/> class.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Gauges.CircularPointer.needleTailLength">
            <summary>
            It contain length of the tail.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Gauges.CircularPointer.SymbolProperty">
            <summary>
            Using a DependencyProperty as the backing store for Symbol.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Gauges.CircularPointer.SymbolPointerHeightProperty">
            <summary>
            Using a DependencyProperty as the backing store for SymbolPointerHeight.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Gauges.CircularPointer.SymbolPointerWidthProperty">
            <summary>
            Using a DependencyProperty as the backing store for SymbolPointerWidth.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Gauges.CircularPointer.SymbolPointerTemplateProperty">
            <summary>
            Using a DependencyProperty as the backing store for SymbolPointerTemplate.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Gauges.CircularPointer.NeedleLengthFactorProperty">
            <summary>
            Using a DependencyProperty as the backing store for NeedleLengthFactor.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Gauges.CircularPointer.NeedlePointerTypeProperty">
            <summary>
            Using a DependencyProperty as the backing store for NeedlePointerType.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Gauges.CircularPointer.ValueProperty">
            <summary>
            Using a DependencyProperty as the backing store for Value.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Gauges.CircularPointer.RangeStartProperty">
            <summary>
            Using a DependencyProperty as the backing store for RangeStart.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Gauges.CircularPointer.OnRangePointerStartAndEndOffsetPropertiesChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            To update the range pointer start and end offset value changes.
            </summary>
            <param name="d">Circular pointer</param>
            <param name="e">About the property changes</param>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Gauges.CircularPointer.TailLengthFactorProperty">
            <summary>
            Using a DependencyProperty as the backing store for TailLengthFactor.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Gauges.CircularPointer.TailFillProperty">
            <summary>
            Using a DependencyProperty as the backing store for TailFill.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Gauges.CircularPointer.TailStrokeProperty">
            <summary>
            Using a DependencyProperty as the backing store for TailStroke.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Gauges.CircularPointer.TailStrokeThicknessProperty">
            <summary>
            Using a DependencyProperty as the backing store for TailStrokeThickness.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Gauges.CircularPointer.KnobCenterProperty">
            <summary>
            This property is used to set the knob to center of the gauge
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Gauges.CircularPointer.UpdateTailContentTransform">
            <summary>
            Update the tail content transform.
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Gauges.CircularPointer.SetProperties">
            <summary>
            In this method used to set the angel value, radius value of the rim and range pointer and set the needle and tail length.
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Gauges.CircularPointer.UpdateKnobRadiusValue">
            <summary>
            To update the knob radius.
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Gauges.CircularPointer.CornerRadiusAngle(System.Double,System.Double)">
            <summary>
            This method used to get the corner radius angle for range pointer cap
            </summary>
            <param name="radius">It contain outer range pointer radius</param>
            <param name="circleRadius">It contain range cap radius</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Gauges.CircularPointer.DrawRangeCap(System.Windows.Point,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            This method used to get the position of the range cap.
            </summary>
            <param name="center">It contain center value</param>
            <param name="radius">It contain radius value</param>
            <param name="halfRangePointerWidth">It contain half range pointer width value</param>
            <param name="startAngle">It contain start angle value</param>
            <param name="endAngle">It contain end angle value</param>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Gauges.CircularPointer.RangePointerStroke">
            <summary>
            Gets or sets the brush that describes the RangePointerStroke of the CircularPointer.
            </summary>
            <value>
            Brush
            </value>
            <example>
            <code language="C#">
            using System;
            using System.Collections.Generic;
            using System.IO;
            using System.Linq;
            using Windows.Foundation;
            using Windows.Foundation.Collections;
            using Windows.UI.Xaml;
            using Windows.UI.Xaml.Controls;
            using Windows.UI.Xaml.Controls.Primitives;
            using Windows.UI.Xaml.Data;
            using Windows.UI.Xaml.Input;
            using Windows.UI.Xaml.Media;
            using Windows.UI.Xaml.Navigation;
            using Common;
            using Syncfusion.UI.Xaml.Gauges;
            
            namespace GaugeWinRTSamples
            {
                public sealed partial class GaugePosition :SampleView
                {
                    public GaugePosition()
                    {
                       InitializeComponent();
                       SfCircularGauge gauge = new SfCircularGauge();
                       CircularPointer pointer = new CircularPointer();
                       pointer.Value = 80;
                       pointer.PointerType = PointerType.RangePointer;
                       pointer.RangePointerStroke = new SolidColorBrush(Colors.White);
                       gauge.MainScale.Pointers.Add(pointer);
                    }
                }
            }
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Gauges.CircularPointer.RangePointerStrokeThickness">
            <summary>
            Gets or sets the thickness of the RangePointer of the CircularPointer.
            </summary>
            <value>
            double
            </value>
            <example>
            <code language="C#">
            using System;
            using System.Collections.Generic;
            using System.IO;
            using System.Linq;
            using Windows.Foundation;
            using Windows.Foundation.Collections;
            using Windows.UI.Xaml;
            using Windows.UI.Xaml.Controls;
            using Windows.UI.Xaml.Controls.Primitives;
            using Windows.UI.Xaml.Data;
            using Windows.UI.Xaml.Input;
            using Windows.UI.Xaml.Media;
            using Windows.UI.Xaml.Navigation;
            using Common;
            using Syncfusion.UI.Xaml.Gauges;
            
            namespace GaugeWinRTSamples
            {
                public sealed partial class GaugePosition :SampleView
                {
                    public GaugePosition()
                    {
                       InitializeComponent();
                       SfCircularGauge gauge = new SfCircularGauge();
                       CircularPointer pointer = new CircularPointer();
                       pointer.Value = 80;
                       pointer.PointerType = PointerType.RangePointer;
                       pointer.RangePointerStrokeThickness = 10;
                       gauge.MainScale.Pointers.Add(pointer);
                    }
                }
            }
            
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Gauges.CircularPointer.Symbol">
            <summary>
            Gets or sets the Symbol value that decides the shape of the SymbolPointer .
            </summary>
            <value>
            double
            </value>
            <remarks>
            <para>This property used to change the symbol of the SymbolPointer.
            </para>
            </remarks>
            <example>
            <code language="C#">
            using System;
            using System.Collections.Generic;
            using System.IO;
            using System.Linq;
            using Windows.Foundation;
            using Windows.Foundation.Collections;
            using Windows.UI.Xaml;
            using Windows.UI.Xaml.Controls;
            using Windows.UI.Xaml.Controls.Primitives;
            using Windows.UI.Xaml.Data;
            using Windows.UI.Xaml.Input;
            using Windows.UI.Xaml.Media;
            using Windows.UI.Xaml.Navigation;
            using Common;
            using Syncfusion.UI.Xaml.Gauges;
            
            namespace GaugeWinRTSamples
            {
                public sealed partial class GaugePosition :SampleView
                {
                    public GaugePosition()
                    {
                       InitializeComponent();
                       SfCircularGauge gauge = new SfCircularGauge();
                       CircularPointer pointer = new CircularPointer();
                       pointer.Value = 80;
                       pointer.PointerType = PointerType.SymbolPointer;
                       pointer.Symbol = Symbol.Ellipse;
                       pointer.SymbolPointerHeight = 20;
                       pointer.SymbolPointerWidth = 20;
                       gauge.MainScale.Pointers.Add(pointer);
                    }
                }
            }
            
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Gauges.CircularPointer.SymbolPointerStroke">
            <summary>
            Gets or sets the brush that describes the SymbolPointerStroke of the CircularPointer.
            </summary>
            <value>
            Brush
            </value>
            <example>
            <code language="C#">
            using System;
            using System.Collections.Generic;
            using System.IO;
            using System.Linq;
            using Windows.Foundation;
            using Windows.Foundation.Collections;
            using Windows.UI.Xaml;
            using Windows.UI.Xaml.Controls;
            using Windows.UI.Xaml.Controls.Primitives;
            using Windows.UI.Xaml.Data;
            using Windows.UI.Xaml.Input;
            using Windows.UI.Xaml.Media;
            using Windows.UI.Xaml.Navigation;
            using Common;
            using Syncfusion.UI.Xaml.Gauges;
            
            namespace GaugeWinRTSamples
            {
                public sealed partial class GaugePosition :SampleView
                {
                    public GaugePosition()
                    {
                       InitializeComponent();
                       SfCircularGauge gauge = new SfCircularGauge();
                       CircularPointer pointer = new CircularPointer();
                       pointer.Value = 80;
                       pointer.PointerType = PointerType.SymbolPointer;
                       pointer.SymbolPointerStroke = new SolidColorBrush(Colors.White);
                       gauge.MainScale.Pointers.Add(pointer);
                    }
                }
            }
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Gauges.CircularPointer.SymbolPointerHeight">
            <summary>
            Gets or sets the SymbolPointerHeight value that decides the size of the SymbolPointer .
            </summary>
            <value>
            double
            </value>
            <remarks>
            <para>This property used to change the size of the SymbolPointer.
            </para>
            </remarks>
            <example>
            <code language="C#">
            using System;
            using System.Collections.Generic;
            using System.IO;
            using System.Linq;
            using Windows.Foundation;
            using Windows.Foundation.Collections;
            using Windows.UI.Xaml;
            using Windows.UI.Xaml.Controls;
            using Windows.UI.Xaml.Controls.Primitives;
            using Windows.UI.Xaml.Data;
            using Windows.UI.Xaml.Input;
            using Windows.UI.Xaml.Media;
            using Windows.UI.Xaml.Navigation;
            using Common;
            using Syncfusion.UI.Xaml.Gauges;
            
            namespace GaugeWinRTSamples
            {
                public sealed partial class GaugePosition :SampleView
                {
                    public GaugePosition()
                    {
                       InitializeComponent();
                       SfCircularGauge gauge = new SfCircularGauge();
                       CircularPointer pointer = new CircularPointer();
                       pointer.Value = 80;
                       pointer.PointerType = PointerType.SymbolPointer;
                       pointer.SymbolPointerHeight = 20;
                       pointer.SymbolPointerWidth = 20;
                       gauge.MainScale.Pointers.Add(pointer);
                    }
                }
            }
            
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Gauges.CircularPointer.SymbolPointerWidth">
            <summary>
            Gets or sets the SymbolPointerWidth value that decides the size of the SymbolPointer .
            </summary>
            <value>
            double
            </value>
            <remarks>
            <para>This property used to change the size of the SymbolPointer.
            </para>
            </remarks>
            <example>
            <code language="C#">
            using System;
            using System.Collections.Generic;
            using System.IO;
            using System.Linq;
            using Windows.Foundation;
            using Windows.Foundation.Collections;
            using Windows.UI.Xaml;
            using Windows.UI.Xaml.Controls;
            using Windows.UI.Xaml.Controls.Primitives;
            using Windows.UI.Xaml.Data;
            using Windows.UI.Xaml.Input;
            using Windows.UI.Xaml.Media;
            using Windows.UI.Xaml.Navigation;
            using Common;
            using Syncfusion.UI.Xaml.Gauges;
            
            namespace GaugeWinRTSamples
            {
                public sealed partial class GaugePosition :SampleView
                {
                    public GaugePosition()
                    {
                       InitializeComponent();
                       SfCircularGauge gauge = new SfCircularGauge();
                       CircularPointer pointer = new CircularPointer();
                       pointer.Value = 80;
                       pointer.PointerType = PointerType.SymbolPointer;
                       pointer.SymbolPointerHeight = 20;
                       pointer.SymbolPointerWidth = 20;
                       gauge.MainScale.Pointers.Add(pointer);
                    }
                }
            }
            
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Gauges.CircularPointer.SymbolPointerTemplate">
            <summary>
            Gets or sets the template for the custom symbol for the SymbolPointer.
            </summary>
            <remarks>
            SymbolPointerTemplate will get applied when the Symbol property of the
            CircularPointer is set to Custom.
            </remarks>
            <value>
            DataTemplate
            </value>
            <example>
            <code language="C#">
            using System;
            using System.Collections.Generic;
            using System.IO;
            using System.Linq;
            using Windows.Foundation;
            using Windows.Foundation.Collections;
            using Windows.UI.Xaml;
            using Windows.UI.Xaml.Controls;
            using Windows.UI.Xaml.Controls.Primitives;
            using Windows.UI.Xaml.Data;
            using Windows.UI.Xaml.Input;
            using Windows.UI.Xaml.Media;
            using Windows.UI.Xaml.Navigation;
            using Common;
            using Syncfusion.UI.Xaml.Gauges;
            
            namespace GaugeWinRTSamples
            {
                public sealed partial class GaugePosition :SampleView
                {
                    public GaugePosition()
                    {
                       InitializeComponent();
                       SfCircularGauge gauge = new SfCircularGauge();
                       CircularPointer pointer = new CircularPointer();
                       pointer.Value = 80;
                       pointer.PointerType = PointerType.SymbolPointer;
                       pointer.Symbol = Symbol.Custom;
                       pointer.SymbolPointerTemplate = Resources["star"];
                       gauge.MainScale.Pointers.Add(pointer);
                    }
                }
            }
            
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Gauges.CircularPointer.NeedlePointerStroke">
            <summary>
            Gets or sets the brush that describes the NeedlePointerStroke of the CircularPointer.
            </summary>
            <value>
            Brush
            </value>
            <example>
            <code language="C#">
            using System;
            using System.Collections.Generic;
            using System.IO;
            using System.Linq;
            using Windows.Foundation;
            using Windows.Foundation.Collections;
            using Windows.UI.Xaml;
            using Windows.UI.Xaml.Controls;
            using Windows.UI.Xaml.Controls.Primitives;
            using Windows.UI.Xaml.Data;
            using Windows.UI.Xaml.Input;
            using Windows.UI.Xaml.Media;
            using Windows.UI.Xaml.Navigation;
            using Common;
            using Syncfusion.UI.Xaml.Gauges;
            
            namespace GaugeWinRTSamples
            {
                public sealed partial class GaugePosition :SampleView
                {
                    public GaugePosition()
                    {
                       InitializeComponent();
                       SfCircularGauge gauge = new SfCircularGauge();
                       CircularPointer pointer = new CircularPointer();
                       pointer.Value = 80;
                       pointer.PointerType = PointerType.NeedlePointer;
                       pointer.NeedlePointerStroke = new SolidColorBrush(Colors.White);
                       gauge.MainScale.Pointers.Add(pointer);
                    }
                }
            }
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Gauges.CircularPointer.NeedlePointerStrokeThickness">
            <summary>
            Gets or sets the thickness value of the NeedlePointer of the CircularPointer.
            </summary>
            <value>
            double
            </value>
            <example>
            <code language="C#">
            using System;
            using System.Collections.Generic;
            using System.IO;
            using System.Linq;
            using Windows.Foundation;
            using Windows.Foundation.Collections;
            using Windows.UI.Xaml;
            using Windows.UI.Xaml.Controls;
            using Windows.UI.Xaml.Controls.Primitives;
            using Windows.UI.Xaml.Data;
            using Windows.UI.Xaml.Input;
            using Windows.UI.Xaml.Media;
            using Windows.UI.Xaml.Navigation;
            using Common;
            using Syncfusion.UI.Xaml.Gauges;
            
            namespace GaugeWinRTSamples
            {
                public sealed partial class GaugePosition :SampleView
                {
                    public GaugePosition()
                    {
                       InitializeComponent();
                       SfCircularGauge gauge = new SfCircularGauge();
                       CircularPointer pointer = new CircularPointer();
                       pointer.Value = 80;
                       pointer.PointerType = PointerType.NeedlePointer;
                       pointer.NeedlePointerStrokeThickness = 2;
                       gauge.MainScale.Pointers.Add(pointer);
                    }
                }
            }
            
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Gauges.CircularPointer.NeedleLengthFactor">
            <summary>
            Gets or sets the value which helps to calculate the NeedleLength of the CircularPointer.
            </summary>
            <value>
            double
            </value>
            <remarks>
            <para>NeedleLengthFactor property is used to calculate the NeedleLength based on the size of the SfCircularGauge. 
            Value of the property should reside between 0.1 and 1.0.
            The default value is 0.75.
            </para>
            </remarks>
            <example>
            <code language="C#">
            using System;
            using System.Collections.Generic;
            using System.IO;
            using System.Linq;
            using Windows.Foundation;
            using Windows.Foundation.Collections;
            using Windows.UI.Xaml;
            using Windows.UI.Xaml.Controls;
            using Windows.UI.Xaml.Controls.Primitives;
            using Windows.UI.Xaml.Data;
            using Windows.UI.Xaml.Input;
            using Windows.UI.Xaml.Media;
            using Windows.UI.Xaml.Navigation;
            using Common;
            using Syncfusion.UI.Xaml.Gauges;
            
            namespace GaugeWinRTSamples
            {
                public sealed partial class GaugePosition :SampleView
                {
                    public GaugePosition()
                    {
                       InitializeComponent();
                       SfCircularGauge gauge = new SfCircularGauge();
                       CircularPointer pointer = new CircularPointer();
                       pointer.Value = 80;
                       pointer.PointerType = PointerType.NeedlePointer;
                       pointer.NeedleLengthFactor = 0.5;
                       gauge.MainScale.Pointers.Add(pointer);
                    }
                }
            }
            
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Gauges.CircularPointer.NeedlePointerType">
            <summary>
            Gets or sets the type of needle pointer.
            </summary>
            <remarks>
            The type of needle pointer can be set by using NeedlePointerType property and
            it’s includes following option.
            Rectangle, Triangle,Tapered, and Arrow.
            Default value of NeedlePointerType property is NeedlePointerType.Rectangle.
            </remarks>
            <value>
            NeedlePointerType
            </value>
            <example>
            <code language="C#">
            using System;
            using System.Collections.Generic;
            using System.IO;
            using System.Linq;
            using Windows.Foundation;
            using Windows.Foundation.Collections;
            using Windows.UI.Xaml;
            using Windows.UI.Xaml.Controls;
            using Windows.UI.Xaml.Controls.Primitives;
            using Windows.UI.Xaml.Data;
            using Windows.UI.Xaml.Input;
            using Windows.UI.Xaml.Media;
            using Windows.UI.Xaml.Navigation;
            using Common;
            using Syncfusion.UI.Xaml.Gauges;
            namespace GaugeWinRTSamples
            {
                public sealed partial class GaugePosition :SampleView
                {
                    public GaugePosition()
                    {
                       InitializeComponent();
                       SfCircularGauge gauge = new SfCircularGauge();
                       CircularPointer pointer = new CircularPointer();
                       pointer.Value = 80;
                       pointer.PointerType = PointerType.NeedlePointer;
                       pointer.NeedlePointerType = NeedlePointerType.Triangle;
                       gauge.MainScale.Pointers.Add(pointer);
                    }
                }
            }
            
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Gauges.CircularPointer.PointerCapStroke">
            <summary>
            Gets or sets the brush that describes the PointerCapStroke of the CircularPointer.
            </summary>
            <value>
            Brush
            </value>
            <example>
            <code language="C#">
            using System;
            using System.Collections.Generic;
            using System.IO;
            using System.Linq;
            using Windows.Foundation;
            using Windows.Foundation.Collections;
            using Windows.UI.Xaml;
            using Windows.UI.Xaml.Controls;
            using Windows.UI.Xaml.Controls.Primitives;
            using Windows.UI.Xaml.Data;
            using Windows.UI.Xaml.Input;
            using Windows.UI.Xaml.Media;
            using Windows.UI.Xaml.Navigation;
            using Common;
            using Syncfusion.UI.Xaml.Gauges;
            
            namespace GaugeWinRTSamples
            {
                public sealed partial class GaugePosition :SampleView
                {
                    public GaugePosition()
                    {
                       InitializeComponent();
                       SfCircularGauge gauge = new SfCircularGauge();
                       CircularPointer pointer = new CircularPointer();
                       pointer.Value = 80;
                       pointer.PointerType = PointerType.NeedlePointer;
                       pointer.PointerCapStroke = new SolidColorBrush(Colors.White);
                       gauge.MainScale.Pointers.Add(pointer);
                    }
                }
            }
            
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Gauges.CircularPointer.PointerCapDiameter">
            <summary>
            Gets or sets the PointerCapDiameter value that decides the size of the PointerCap of the NeedlePointer .
            </summary>
            <value>
            double
            </value>
            <remarks>
            <para>This property used to change the size of the NeedlePointer cap.
            </para>
            </remarks>
            <example>
            <code language="C#">
            using System;
            using System.Collections.Generic;
            using System.IO;
            using System.Linq;
            using Windows.Foundation;
            using Windows.Foundation.Collections;
            using Windows.UI.Xaml;
            using Windows.UI.Xaml.Controls;
            using Windows.UI.Xaml.Controls.Primitives;
            using Windows.UI.Xaml.Data;
            using Windows.UI.Xaml.Input;
            using Windows.UI.Xaml.Media;
            using Windows.UI.Xaml.Navigation;
            using Common;
            using Syncfusion.UI.Xaml.Gauges;
            
            namespace GaugeWinRTSamples
            {
                public sealed partial class GaugePosition :SampleView
                {
                    public GaugePosition()
                    {
                       InitializeComponent();
                       SfCircularGauge gauge = new SfCircularGauge();
                       CircularPointer pointer = new CircularPointer();
                       pointer.Value = 80;
                       pointer.PointerType = PointerType.NeedlePointer;
                       pointer.PointerCapDiameter = 20;
                       gauge.MainScale.Pointers.Add(pointer);
                    }
                }
            }
            
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Gauges.CircularPointer.KnobRadiusFactor">
            <summary>
            Gets or sets the knob radius factor. Its range is from 0 to 1.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Gauges.CircularPointer.KnobStroke">
            <summary>
            Gets or sets the knob stroke color.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Gauges.CircularPointer.KnobStrokeThickness">
            <summary>
            Gets or sets the knob stroke thickness.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Gauges.CircularPointer.KnobFill">
            <summary>
            Gets or sets the knob fill color.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Gauges.CircularPointer.RangePointerVisibility">
            <summary>
            Gets or sets user interface (UI) visibility of RangePointer.
            </summary>
            <remarks>
            There are three types of pointers. While choosing a pointer using the
            PointerType property the other two pointers&apos; visibility property will be
            set to Collapsed. Default value is Visible.
            </remarks>
            <value>
            Visibility
            </value>
            <example>
            <code language="C#">
            using System;
            using System.Collections.Generic;
            using System.IO;
            using System.Linq;
            using Windows.Foundation;
            using Windows.Foundation.Collections;
            using Windows.UI.Xaml;
            using Windows.UI.Xaml.Controls;
            using Windows.UI.Xaml.Controls.Primitives;
            using Windows.UI.Xaml.Data;
            using Windows.UI.Xaml.Input;
            using Windows.UI.Xaml.Media;
            using Windows.UI.Xaml.Navigation;
            using Common;
            using Syncfusion.UI.Xaml.Gauges;
            
            namespace GaugeWinRTSamples
            {
                public sealed partial class GaugePosition :SampleView
                {
                    public GaugePosition()
                    {
                       InitializeComponent();
                       SfCircularGauge gauge = new SfCircularGauge();
                       CircularPointer needlePointer = new CircularPointer();
                       needlePointer.Value = 80;
                       needlePointer.PointerType = PointerType.NeedlePointer;
                       needlePointer.RangePointerVisibility = Visibility.Collapsed;
                       gauge.MainScale.Pointers.Add(needlePointer);
                    }
                }
            }
            
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Gauges.CircularPointer.SymbolPointerVisibility">
            <summary>
            Gets or sets the user interface (UI) visibility of SymbolPointer.
            </summary>
            <remarks>
            There are three types of pointers. While choosing a pointer using the
            PointerType property the other two pointers&apos; visibility property will be
            set to Collapsed. Default value is Visible.
            </remarks>
            <value>
            Visibility
            </value>
            <example>
            <code language="C#">
            using System;
            using System.Collections.Generic;
            using System.IO;
            using System.Linq;
            using Windows.Foundation;
            using Windows.Foundation.Collections;
            using Windows.UI.Xaml;
            using Windows.UI.Xaml.Controls;
            using Windows.UI.Xaml.Controls.Primitives;
            using Windows.UI.Xaml.Data;
            using Windows.UI.Xaml.Input;
            using Windows.UI.Xaml.Media;
            using Windows.UI.Xaml.Navigation;
            using Common;
            using Syncfusion.UI.Xaml.Gauges;
            
            namespace GaugeWinRTSamples
            {
                public sealed partial class GaugePosition :SampleView
                {
                    public GaugePosition()
                    {
                       InitializeComponent();
                       SfCircularGauge gauge = new SfCircularGauge();
                       CircularPointer needlePointer = new CircularPointer();
                       needlePointer.Value = 80;
                       needlePointer.PointerType = PointerType.NeedlePointer;
                       needlePointer.SymbolPointerVisibility = Visibility.Collapsed;
                       gauge.MainScale.Pointers.Add(needlePointer);
                    }
                }
            }
            
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Gauges.CircularPointer.NeedlePointerVisibility">
            <summary>
            Gets or sets user interface visibility of the NeedlePointer.
            </summary>
            <remarks>
            There are three types of pointers. While choosing a pointer using the
            PointerType property the other two pointers&apos; visibility property will be
            set to Collapsed. Default value is Visible.
            </remarks>
            <value>
            Visibility
            </value>
            <example>
            <code language="C#">
            using System;
            using System.Collections.Generic;
            using System.IO;
            using System.Linq;
            using Windows.Foundation;
            using Windows.Foundation.Collections;
            using Windows.UI.Xaml;
            using Windows.UI.Xaml.Controls;
            using Windows.UI.Xaml.Controls.Primitives;
            using Windows.UI.Xaml.Data;
            using Windows.UI.Xaml.Input;
            using Windows.UI.Xaml.Media;
            using Windows.UI.Xaml.Navigation;
            using Common;
            using Syncfusion.UI.Xaml.Gauges;
            
            namespace GaugeWinRTSamples
            {
                public sealed partial class GaugePosition :SampleView
                {
                    public GaugePosition()
                    {
                       InitializeComponent();
                       SfCircularGauge gauge = new SfCircularGauge();
                       CircularPointer needlePointer = new CircularPointer();
                       needlePointer.Value = 80;
                       needlePointer.PointerType = PointerType.NeedlePointer;
                       needlePointer.NeedlePointerVisibility = Visibility.Collapsed;
                       gauge.MainScale.Pointers.Add(needlePointer);
                    }
                }
            }
            
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Gauges.CircularPointer.Value">
            <summary>
            Gets or sets the Value that decides the position of the CircularPointer in the CircularScale.
            </summary>
            <remarks>
            Value property is one of the most important property. Based on the Value
            property pointer has been positioned on the CircularScale. Value should resides
            between the start and end value of the scale. If the value of this property is
            less than StartValue of the CircularScale, then the StartValue of the
            CircularScale is set to the Value of the pointer. Similarly EndValue of the
            CircularScale is set to the Value of the pointer when Value is greater that
            EndValue of the scale.
            </remarks>
            <value>
            double
            </value>
            <example>
            <code language="C#">
            using System;
            using System.Collections.Generic;
            using System.IO;
            using System.Linq;
            using Windows.Foundation;
            using Windows.Foundation.Collections;
            using Windows.UI.Xaml;
            using Windows.UI.Xaml.Controls;
            using Windows.UI.Xaml.Controls.Primitives;
            using Windows.UI.Xaml.Data;
            using Windows.UI.Xaml.Input;
            using Windows.UI.Xaml.Media;
            using Windows.UI.Xaml.Navigation;
            using Common;
            using Syncfusion.UI.Xaml.Gauges;
            
            namespace GaugeWinRTSamples
            {
                public sealed partial class GaugePosition :SampleView
                {
                    public GaugePosition()
                    {
                       InitializeComponent();
                       SfCircularGauge gauge = new SfCircularGauge();
                       CircularPointer needlePointer = new CircularPointer();
                       needlePointer.Value = 80;
                       needlePointer.PointerType = PointerType.NeedlePointer;
                       gauge.MainScale.Pointers.Add(needlePointer);
                    }
                }
            }
            
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Gauges.CircularPointer.PointerType">
            <summary>
            Gets or sets Type of the CircularPointer.
            </summary>
            <remarks>
            There are three types of pointers. User can choose a pointer using the PointerType property. 
            Options are
            1. NeedlePointer (Default)
            2. RangePointer
            3. Symbolointer
            </remarks>
            <value>
            PointerType
            </value>
            <example>
            <code language="C#">
            using System;
            using System.Collections.Generic;
            using System.IO;
            using System.Linq;
            using Windows.Foundation;
            using Windows.Foundation.Collections;
            using Windows.UI.Xaml;
            using Windows.UI.Xaml.Controls;
            using Windows.UI.Xaml.Controls.Primitives;
            using Windows.UI.Xaml.Data;
            using Windows.UI.Xaml.Input;
            using Windows.UI.Xaml.Media;
            using Windows.UI.Xaml.Navigation;
            using Common;
            using Syncfusion.UI.Xaml.Gauges;
            
            namespace GaugeWinRTSamples
            {
                public sealed partial class GaugePosition :SampleView
                {
                    public GaugePosition()
                    {
                       InitializeComponent();
                       SfCircularGauge gauge = new SfCircularGauge();
                       CircularPointer pointer = new CircularPointer();
                       pointer.Value = 80;
                       pointer.PointerType = PointerType.NeedlePointer;
                       gauge.MainScale.Pointers.Add(pointer);
                    }
                }
            }
            
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Gauges.CircularPointer.EnableAnimation">
            <summary>
            Gets or sets value indicating whether this element can be animated.
            </summary>
            <remarks>
            <para>EnableAnimation property is used to animate the movement of the pointer 
            when the Value is of the pointer is changed. Its default value is true.</para>
            </remarks>
            <value>
            <see langword="true"/> if ; otherwise, <see langword="false"/>.
            </value>
            <example>
            <code language="C#">
            using System;
            using System.Collections.Generic;
            using System.IO;
            using System.Linq;
            using Windows.Foundation;
            using Windows.Foundation.Collections;
            using Windows.UI.Xaml;
            using Windows.UI.Xaml.Controls;
            using Windows.UI.Xaml.Controls.Primitives;
            using Windows.UI.Xaml.Data;
            using Windows.UI.Xaml.Input;
            using Windows.UI.Xaml.Media;
            using Windows.UI.Xaml.Navigation;
            using Common;
            using Syncfusion.UI.Xaml.Gauges;
            
            namespace GaugeWinRTSamples
            {
                public sealed partial class GaugePosition :SampleView
                {
                    public GaugePosition()
                    {
                       InitializeComponent();
                       SfCircularGauge gauge = new SfCircularGauge();
                       CircularPointer pointer = new CircularPointer();
                       pointer.Value = 80;
                       pointer.PointerType = PointerType.NeedlePointer;
                       pointer.EnableAnimation = false;
                    }
                }
            }
            
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Gauges.CircularPointer.Offset">
            <summary>
            Gets or sets the offset position of range and symbol pointer. Its range is from 0 to 1. Set RangePointerPosition as custom to enable offset behavior.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Gauges.CircularPointer.RangeStartOffset">
            <summary>
            Gets or sets the range pointer start offset position. Its range is from 0 to 1. 
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Gauges.CircularPointer.RangeEndOffset">
            <summary>
            Gets or sets the range pointer end offset position. Its range is from 0 to 1.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Gauges.CircularPointer.TailLengthFactor">
            <summary>
            Gets or sets the length factor to needle pointer’s tail. It’s range is 0 to 1.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Gauges.CircularPointer.TailFill">
            <summary>
             Gets or sets the fill color to needle pointer’s tail.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Gauges.CircularPointer.TailStroke">
            <summary>
             Gets or sets the stroke to needle pointer’s tail.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Gauges.CircularPointer.TailStrokeThickness">
            <summary>
             Gets or sets the stroke thickness to needle pointer’s tail.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Gauges.CircularPointer.TailLength">
            <summary>
             Gets or sets tail length of the needle pointer.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Gauges.CircularPointer.TailContent">
            <summary>
            Gets or sets tail content of the needle pointer.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Gauges.CircularPointer.ClockWiseStartAngle">
            <summary>
            Gets or set the start angle.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Gauges.CircularPointer.StartCapCenter">
            <summary>
            Gets or sets the value for range cap mode start center value
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Gauges.CircularPointer.StartCapRadiusX">
            <summary>
            Gets or sets the value for range cap mode start radius x value
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Gauges.CircularPointer.StartCapRadiusY">
            <summary>
             Gets or sets the value for range cap mode start radius y value
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Gauges.CircularPointer.EndCapCenter">
            <summary>
            Gets or sets the value for range cap mode end center value
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Gauges.CircularPointer.EndCapRadiusX">
            <summary>
            Gets or sets the value for range cap mode end radius x value
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Gauges.CircularPointer.EndCapRadiusY">
            <summary>
            Gets or sets the value for range cap mode end radius y value
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Gauges.CircularPointer.KnobCenter">
            <summary>
            Gets or sets the center point to place the knob
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Gauges.CircularPointer.RangeCap">
            <summary>
            Gets or sets the range cap on start and end position of range pointer.
            </summary>
        </member>
        <member name="E:Syncfusion.UI.Xaml.Gauges.CircularPointer.PointerPositionChanged">
            <summary>
            Occurs when pointer position is changed 
            </summary>
        </member>
        <member name="T:Syncfusion.UI.Xaml.Gauges.CircularPointerCollection">
            <summary>
            It is a collection that contains a set of Pointers that can be used to point
            values in CircularScale .
            </summary>
        </member>
        <member name="T:Syncfusion.UI.Xaml.Gauges.CircularRange">
            <summary>
            CircularRange is a class that denotes various qualitative ranges for a circular scale. Create an instance of CircularRange, and set required properties.
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Gauges.CircularRange.#ctor">
            <summary>
            Initializes a new instance of the <see
            cref="T:Syncfusion.UI.Xaml.Gauges.CircularRange"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Gauges.CircularRange.OnInnerAndOuterOffsetPropertiesChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            To update the offset values.
            </summary>
            <param name="d">Circular range</param>
            <param name="e">About the property values.</param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Gauges.CircularRange.DrawArc">
            <summary>
            To draw the range.
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Gauges.CircularRange.DrawRangeArc(System.Double,System.Double)">
            <summary>
            To draw the range from the given angle
            </summary>
            <param name="startAngle">Start angle of the range</param>
            <param name="endAngle">End angle of the range</param>
            <returns></returns>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Gauges.CircularRange.ClockWiseStartAngle">
            <summary>
            Gets or set the start angle.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Gauges.CircularRange.StartValue">
            <summary>
            Gets or sets the Value of the CircularRange's StartValue.
            </summary>
            <remarks>
            A range is a visual element which begins and ends at specified values within a scale. 
            These start and end values are set by the StartValue and EndValue properties of Range
            </remarks>
            <value>
            double
            </value>
            <example>
            <code language="C#">
            using System;
            using System.Collections.Generic;
            using System.IO;
            using System.Linq;
            using Windows.Foundation;
            using Windows.Foundation.Collections;
            using Windows.UI.Xaml;
            using Windows.UI.Xaml.Controls;
            using Windows.UI.Xaml.Controls.Primitives;
            using Windows.UI.Xaml.Data;
            using Windows.UI.Xaml.Input;
            using Windows.UI.Xaml.Media;
            using Windows.UI.Xaml.Navigation;
            using Common;
            using Syncfusion.UI.Xaml.Gauges;
            
            namespace GaugeWinRTSamples
            {
                public sealed partial class GaugePosition :SampleView
                {
                    public GaugePosition()
                    {
                       InitializeComponent();
                       SfCircularGauge gauge = new SfCircularGauge();
                       CircularRange range1 = new CircularRange();
                       range1.StartValue = 0;
                       range1.EndValue = 40;
                       range1.Stroke = new SolidColorBrush(Colors.Green);
                       range1.StrokeThickness = 10;            
                       gauge.MainScale.Ranges.Add(range1);            
                    }
                }
            }
            
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Gauges.CircularRange.EndValue">
            <summary>
            Gets or sets the Value of the CircularRange's EndValue.
            </summary>
            <remarks>
            A range is a visual element which begins and ends at specified values within a scale. 
            These start and end values are set by the StartValue and EndValue properties of Range
            </remarks>
            <value>
            double
            </value>
            <example>
            <code language="C#">
            using System;
            using System.Collections.Generic;
            using System.IO;
            using System.Linq;
            using Windows.Foundation;
            using Windows.Foundation.Collections;
            using Windows.UI.Xaml;
            using Windows.UI.Xaml.Controls;
            using Windows.UI.Xaml.Controls.Primitives;
            using Windows.UI.Xaml.Data;
            using Windows.UI.Xaml.Input;
            using Windows.UI.Xaml.Media;
            using Windows.UI.Xaml.Navigation;
            using Common;
            using Syncfusion.UI.Xaml.Gauges;
            
            namespace GaugeWinRTSamples
            {
                public sealed partial class GaugePosition :SampleView
                {
                    public GaugePosition()
                    {
                       InitializeComponent();
                       SfCircularGauge gauge = new SfCircularGauge();
                       CircularRange range1 = new CircularRange();
                       range1.StartValue = 0;
                       range1.EndValue = 40;
                       range1.Stroke = new SolidColorBrush(Colors.Green);
                       range1.StrokeThickness = 10;            
                       gauge.MainScale.Ranges.Add(range1);            
                    }
                }
            }
            
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Gauges.CircularRange.EndAngle">
            <summary>
            Gets value of the CircularRange's EndAngle.
            </summary>
            <remarks>
            EndAngle is a read only property used to get the value of the range's EndAngle.
            </remarks>
            <value>
            double
            </value>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Gauges.CircularRange.StartPoint">
            <summary>
            Gets Pointvalue of the CircularRange's StartPoint.
            </summary>
            <remarks>
            StartPoint is a read only property used to get the value of the StartPoint.
            </remarks>
            <value>
            Point
            </value>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Gauges.CircularRange.EndPoint">
            <summary>
            Gets pointvalue of the CircularRange's EndPoint.
            </summary>
            <remarks>
            EndPoint is a read only property used to get the value of the EndPoint.
            </remarks>
            <value>
            Point
            </value>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Gauges.CircularRange.Size">
            <summary>
            Gets Size of the CircularRange which helps to position the CircularRange.
            </summary>
            <remarks>
            Size is a read only property used to get the value of the Size.
            </remarks>
            <value>
            Size
            </value>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Gauges.CircularRange.Stroke">
            <summary>
            Gets or sets the brush that describes the Stroke value of the CircularRange.
            </summary>
            <value>
            Brush
            </value>
            <example>
            <code language="C#">
            using System;
            using System.Collections.Generic;
            using System.IO;
            using System.Linq;
            using Windows.Foundation;
            using Windows.Foundation.Collections;
            using Windows.UI.Xaml;
            using Windows.UI.Xaml.Controls;
            using Windows.UI.Xaml.Controls.Primitives;
            using Windows.UI.Xaml.Data;
            using Windows.UI.Xaml.Input;
            using Windows.UI.Xaml.Media;
            using Windows.UI.Xaml.Navigation;
            using Common;
            using Syncfusion.UI.Xaml.Gauges;
            
            namespace GaugeWinRTSamples
            {
                public sealed partial class GaugePosition :SampleView
                {
                    public GaugePosition()
                    {
                       InitializeComponent();
                       SfCircularGauge gauge = new SfCircularGauge();
                       CircularRange range1 = new CircularRange();
                       range1.StartValue = 0;
                       range1.EndValue = 40;
                       range1.Stroke = new SolidColorBrush(Colors.Green);
                       range1.StrokeThickness = 10;            
                       gauge.MainScale.Ranges.Add(range1);            
                    }
                }
            }
            
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Gauges.CircularRange.StrokeThickness">
            <summary>
            Gets or sets thickness of the RangeStroke.
            </summary>
            <value>
            double
            </value>
            <example>
            <code language="C#">
            using System;
            using System.Collections.Generic;
            using System.IO;
            using System.Linq;
            using Windows.Foundation;
            using Windows.Foundation.Collections;
            using Windows.UI.Xaml;
            using Windows.UI.Xaml.Controls;
            using Windows.UI.Xaml.Controls.Primitives;
            using Windows.UI.Xaml.Data;
            using Windows.UI.Xaml.Input;
            using Windows.UI.Xaml.Media;
            using Windows.UI.Xaml.Navigation;
            using Common;
            using Syncfusion.UI.Xaml.Gauges;
            
            namespace GaugeWinRTSamples
            {
                public sealed partial class GaugePosition :SampleView
                {
                    public GaugePosition()
                    {
                       InitializeComponent();
                       SfCircularGauge gauge = new SfCircularGauge();
                       CircularRange range1 = new CircularRange();
                       range1.StartValue = 0;
                       range1.EndValue = 40;
                       range1.Stroke = new SolidColorBrush(Colors.Green);
                       range1.StrokeThickness = 10;            
                       gauge.MainScale.Ranges.Add(range1);            
                    }
                }
            }
            
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Gauges.CircularRange.IsLogarithmic">
            <summary>
            Gets or sets a value indicating whether the label values should be logarithm
            </summary>
            <value>
            bool
            </value>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Gauges.CircularRange.StartWidth">
            <summary>
            Gets or sets the Start Width of the CircularRange.
            </summary>
            <value>
            double
            </value>
            <example>
            <code language="C#">
            using System;
            using System.Collections.Generic;
            using System.IO;
            using System.Linq;
            using Windows.Foundation;
            using Windows.Foundation.Collections;
            using Windows.UI.Xaml;
            using Windows.UI.Xaml.Controls;
            using Windows.UI.Xaml.Controls.Primitives;
            using Windows.UI.Xaml.Data;
            using Windows.UI.Xaml.Input;
            using Windows.UI.Xaml.Media;
            using Windows.UI.Xaml.Navigation;
            using Common;
            using Syncfusion.UI.Xaml.Gauges;
            
            namespace GaugeWinRTSamples
            {
                public sealed partial class GaugePosition :SampleView
                {
                    public GaugePosition()
                    {
                       InitializeComponent();
                       SfCircularGauge gauge = new SfCircularGauge();
                       CircularRange range1 = new CircularRange();
                       range1.StartValue = 0;
                       range1.EndValue = 40;
                       range1.Stroke = new SolidColorBrush(Colors.Green);
                       range1.StartWidth = 10;            
                       gauge.MainScale.Ranges.Add(range1);            
                    }
                }
            }
            
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Gauges.CircularRange.EndWidth">
            <summary>
            Gets or sets the End Width of the CircularRange.
            </summary>
            <value>
            double
            </value>
            <example>
            <code language="C#">
            using System;
            using System.Collections.Generic;
            using System.IO;
            using System.Linq;
            using Windows.Foundation;
            using Windows.Foundation.Collections;
            using Windows.UI.Xaml;
            using Windows.UI.Xaml.Controls;
            using Windows.UI.Xaml.Controls.Primitives;
            using Windows.UI.Xaml.Data;
            using Windows.UI.Xaml.Input;
            using Windows.UI.Xaml.Media;
            using Windows.UI.Xaml.Navigation;
            using Common;
            using Syncfusion.UI.Xaml.Gauges;
            
            namespace GaugeWinRTSamples
            {
                public sealed partial class GaugePosition :SampleView
                {
                    public GaugePosition()
                    {
                       InitializeComponent();
                       SfCircularGauge gauge = new SfCircularGauge();
                       CircularRange range1 = new CircularRange();
                       range1.StartValue = 0;
                       range1.EndValue = 40;
                       range1.Stroke = new SolidColorBrush(Colors.Green);
                       range1.EndWidth = 10;            
                       gauge.MainScale.Ranges.Add(range1);            
                    }
                }
            }
            
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Gauges.CircularRange.InnerStartOffset">
            <summary>
            Gets or sets the inner start offset position of the range. Its range is from 0 to 1. Set RangePosition as custom to enable offset behavior.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Gauges.CircularRange.InnerEndOffset">
            <summary>
            Gets or sets the inner end offset position of the range. Its range is from 0 to 1. Set RangePosition as custom to enable offset behavior.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Gauges.CircularRange.OuterStartOffset">
            <summary>
            Gets or sets the outer start offset position of the range. Its range is from 0 to 1. Set RangePosition as custom to enable offset behavior.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Gauges.CircularRange.OuterEndOffset">
            <summary>
            Gets or sets the outer end offset position of the range. Its range is from 0 to 1. Set RangePosition as custom to enable offset behavior.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Gauges.CircularRange.Offset">
            <summary>
             Gets or sets Offset value. It is used to customize the position of the ranges.
            </summary>
        </member>
        <member name="T:Syncfusion.UI.Xaml.Gauges.CircularRangeCollection">
            <summary>
             It is a collection that contains a set of Ranges that can be used to specifiy
            various ranges of CircularScale .
            </summary>
        </member>
        <member name="T:Syncfusion.UI.Xaml.Gauges.CircularScale">
            <summary>
             It contains collection of ranges, pointers, labels, and ticks that help to
            visualize the data.
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Gauges.CircularScale.#ctor">
            <summary>
            Initializes a new instance of the <see
            cref="T:Syncfusion.UI.Xaml.Gauges.CircularScale"/> class.
            </summary>
            <remarks>
            New instance of the CircularRangeCollection, CircularPointerCollection,
            CircularScaleTickCollection, CircularScaleLabelCollection classes are
            initialized.
            </remarks>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Gauges.CircularScale.OnShowTicksPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            To update the ticks visibility.
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Gauges.CircularScale.OnShowLabelsPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            To updated the labels visibility.
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Gauges.CircularScale.OnShowRimPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            To update the rim visibility.
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Gauges.CircularScale.OnOffsetPropertiesChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            To update the offset values
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Gauges.CircularScale.OnShowLabelPropertiesChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Update the labels and label visibility.
            </summary>
            <param name="d">Dependency object</param>
            <param name="e">Event args</param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Gauges.CircularScale.OnLabelCreated(Syncfusion.UI.Xaml.Gauges.CircularScaleLabel)">
            <summary>
            Raise the event when creating label to change the content of label.
            </summary>
            <param name="label">Contain label</param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Gauges.CircularScale.CalculateBounds">
            <summary>
            This method is used to calculate the bounds
            </summary>
            <returns>Returns bounds of gauge</returns>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Gauges.CircularScale.CalculateCenter">
            <summary>
            This method is used to calculate center
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Gauges.CircularScale.GetActualCenter(System.Windows.Point,System.Double)">
            <summary>
            This method is used to get the actual center point
            </summary>
            <param name="centerPoint">The centerpoint</param>
            <param name="radius">The radius</param>
            <returns>Gets the center point</returns>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Gauges.CircularScale.GetMinMaxValue(System.Windows.Point,System.Windows.Point,System.Int32)">
            <summary>
            This method is used to find the min max value
            </summary>
            <param name="point1">Sets the point1</param>
            <param name="point2">Sets the point2</param>
            <param name="degree">Sets the degree</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Gauges.CircularScale.UpdateLabelContent(Syncfusion.UI.Xaml.Gauges.CircularScaleLabel)">
            <summary>
            Used to call the label created event when new label added in the circular scale labels collection.
            </summary>
            <param name="circularLabel">Contain label</param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Gauges.CircularScale.UpdateSweepDirectionAngle">
            <summary>
            To update the start angle when changing the sweep direction.
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Gauges.CircularScale.UpdateGaugeBasedonStartAndSweepAngle">
            <summary>
            To update the gauge when the GaugeType,StartAngle and SweepAngle changed
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Gauges.CircularScale.UpdateTicks">
            <summary>
            To update the major and minor ticks after changing the offset values.
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Gauges.CircularScale.UpdateStartEndValue">
            <summary>
            To update the scale start and end value
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Gauges.CircularScale.SetSymbolMargin">
            <summary>
            To update the symbol pointer margin.
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Gauges.CircularScale.InvalidateLayout">
            <summary>
            To update the label and ticks panel.
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Gauges.CircularScale.ValidateOffsetValues(System.Double,System.String)">
            <summary>
            TO update the internal values.
            </summary>
            <param name="offset"></param>
            <param name="propertyName"></param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Gauges.CircularScale.Dispose">
            <summary>
            Method to release allocated resources of CircularScale.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Gauges.CircularScale.ActualCenter">
            <summary>
            Gets or sets the center of the gauge based on the sweep angle.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Gauges.CircularScale.ShowTicks">
            <summary>
            Gets or sets a value to enable or disable the major and minor ticks.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Gauges.CircularScale.ShowLabels">
            <summary>
            Gets or sets a value to enable or disable the labels.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Gauges.CircularScale.ShowRim">
            <summary>
            Gets or sets a value to enable or disable the rim.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Gauges.CircularScale.RimStroke">
            <summary>
            Gets or sets the brush that describes the RimStroke value of the CircularScale.
            </summary>
            <remarks>
            RimStroke property will remains effective until the value of the
            RangePostion property is not set to 'SetAsScaleRim'.
            </remarks>
            <value>
            Brush
            </value>
            <example>
            <code language="C#">
            using System;
            using System.Collections.Generic;
            using System.IO;
            using System.Linq;
            using Windows.Foundation;
            using Windows.Foundation.Collections;
            using Windows.UI.Xaml;
            using Windows.UI.Xaml.Controls;
            using Windows.UI.Xaml.Controls.Primitives;
            using Windows.UI.Xaml.Data;
            using Windows.UI.Xaml.Input;
            using Windows.UI.Xaml.Media;
            using Windows.UI.Xaml.Navigation;
            using Common;
            using Syncfusion.UI.Xaml.Gauges;
            
            namespace GaugeWinRTSamples
            {
                public sealed partial class GaugePosition :SampleView
                {
                    public GaugePosition()
                    {
                        InitializeComponent();
                        SfCircularGauge gauge = new SfCircularGauge();
                        CircularScale scale = new CircularScale();
                        SfCircularGauge gauge = new SfCircularGauge();
                        CircularScale scale = new CircularScale();
                        scale.RimStroke = new SolidColorBrush(Colors.Red);
                        gauge.MainScale = scale;
                    }
                }
            }
            
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Gauges.CircularScale.RimStrokeThickness">
            <summary>
            Gets or sets the thickness of the RimStroke.
            </summary>
            <value>
            double
            </value>
            <example>
            <code language="C#">
            using System;
            using System.Collections.Generic;
            using System.IO;
            using System.Linq;
            using Windows.Foundation;
            using Windows.Foundation.Collections;
            using Windows.UI.Xaml;
            using Windows.UI.Xaml.Controls;
            using Windows.UI.Xaml.Controls.Primitives;
            using Windows.UI.Xaml.Data;
            using Windows.UI.Xaml.Input;
            using Windows.UI.Xaml.Media;
            using Windows.UI.Xaml.Navigation;
            using Common;
            using Syncfusion.UI.Xaml.Gauges;
            
            namespace GaugeWinRTSamples
            {
                public sealed partial class GaugePosition :SampleView
                {
                    public GaugePosition()
                    {
                       InitializeComponent();
                       SfCircularGauge gauge = new SfCircularGauge();
                       CircularScale scale = new CircularScale();
                       scale.RimStrokeThickness =3;
                       gauge.MainScale = scale;
                    }
                }
            }
            
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Gauges.CircularScale.NumericScaleType">
            <summary>
            Gets or sets the numeric scale type of the scale.
            </summary>
            <remarks>
            Default value of this property is Auto. This property remains active only when EnableSmartLabels property is set to true.
            </remarks>
            <value>
            NumericScaleType
            </value>
            <example>
            <code language="C#">
            using System;
            using System.Collections.Generic;
            using System.IO;
            using System.Linq;
            using Windows.Foundation;
            using Windows.Foundation.Collections;
            using Windows.UI.Xaml;
            using Windows.UI.Xaml.Controls;
            using Windows.UI.Xaml.Controls.Primitives;
            using Windows.UI.Xaml.Data;
            using Windows.UI.Xaml.Input;
            using Windows.UI.Xaml.Media;
            using Windows.UI.Xaml.Navigation;
            using Common;
            using Syncfusion.UI.Xaml.Gauges;
            
            namespace GaugeWinRTSamples
            {
                public sealed partial class GaugePosition :SampleView
                {
                    public GaugePosition()
                    {
                        InitializeComponent();
                        SfCircularGauge gauge = new SfCircularGauge();
                        CircularScale scale = new CircularScale();
                        scale.EnableSmartLabels = true;
                        scale.NoOfFractionalDigit = 1;
                        gauge.MainScale = scale;
                    }
                }
            }
            
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Gauges.CircularScale.EnableSmartLabels">
            <summary>
            Gets or sets a value indicating whether to display smart labels or not .
            </summary>
            <remarks>
            This property helps to set the Numeric scale type to the labels displayed in
            scale
            </remarks>
            <value>
            <see langword="true"/> if ; otherwise, <see langword="false"/>.
            </value>
            <example>
            <code language="C#">
            using System;
            using System.Collections.Generic;
            using System.IO;
            using System.Linq;
            using Windows.Foundation;
            using Windows.Foundation.Collections;
            using Windows.UI.Xaml;
            using Windows.UI.Xaml.Controls;
            using Windows.UI.Xaml.Controls.Primitives;
            using Windows.UI.Xaml.Data;
            using Windows.UI.Xaml.Input;
            using Windows.UI.Xaml.Media;
            using Windows.UI.Xaml.Navigation;
            using Common;
            using Syncfusion.UI.Xaml.Gauges;
            
            namespace GaugeWinRTSamples
            {
                public sealed partial class GaugePosition :SampleView
                {
                    public GaugePosition()
                    {
                        InitializeComponent();
                        SfCircularGauge gauge = new SfCircularGauge();
                        CircularScale scale = new CircularScale();
                        scale.EnableSmartLabels = true;
                        scale.NoOfFractionalDigit = 1;
                        gauge.MainScale = scale;
                    }
                }
            }
            
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Gauges.CircularScale.NoOfFractionalDigit">
            <summary>
            Gets or sets the number of fractional digit has to be displayed in the Scale
            labels..
            </summary>
            <remarks>
            Default value of this property is 1. If the values have large no of fractional
            values then the fractional value count is reduced to one.
            </remarks>
            <value>
            int
            </value>
            <example>
            <code language="C#">
            using System;
            using System.Collections.Generic;
            using System.IO;
            using System.Linq;
            using Windows.Foundation;
            using Windows.Foundation.Collections;
            using Windows.UI.Xaml;
            using Windows.UI.Xaml.Controls;
            using Windows.UI.Xaml.Controls.Primitives;
            using Windows.UI.Xaml.Data;
            using Windows.UI.Xaml.Input;
            using Windows.UI.Xaml.Media;
            using Windows.UI.Xaml.Navigation;
            using Common;
            using Syncfusion.UI.Xaml.Gauges;
            
            namespace GaugeWinRTSamples
            {
                public sealed partial class GaugePosition :SampleView
                {
                    public GaugePosition()
                    {
                        InitializeComponent();
                        SfCircularGauge gauge = new SfCircularGauge();
                        CircularScale scale = new CircularScale();
                        scale.EnableSmartLabels = true;
                        scale.NoOfFractionalDigit = 1;
                        gauge.MainScale = scale;
                    }
                }
            }
            
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Gauges.CircularScale.LabelPosition">
            <summary>
            Gets or sets LabelPosition that decides the position of Labels in the CircularScale.
            </summary>
            <remarks>
            The Labels in the scale can be placed inside the scale or outside the scale by
            choosing the options avail in the LabelPosition property. Options are
            1. Inside (Default) : Places the Labels inside the scale.
            2. Outside          : Places the Labels outside the scale.
            </remarks>
            <value>
            LabelPosition
            </value>
            <example>
            <code language="C#">
            using System;
            using System.Collections.Generic;
            using System.IO;
            using System.Linq;
            using Windows.Foundation;
            using Windows.Foundation.Collections;
            using Windows.UI.Xaml;
            using Windows.UI.Xaml.Controls;
            using Windows.UI.Xaml.Controls.Primitives;
            using Windows.UI.Xaml.Data;
            using Windows.UI.Xaml.Input;
            using Windows.UI.Xaml.Media;
            using Windows.UI.Xaml.Navigation;
            using Common;
            using Syncfusion.UI.Xaml.Gauges;
            
            namespace GaugeWinRTSamples
            {
                public sealed partial class GaugePosition :SampleView
                {
                    public GaugePosition()
                    {
                        InitializeComponent();
                        SfCircularGauge gauge = new SfCircularGauge();
                        CircularScale scale = new CircularScale();
                        scale.LabelPosition = LabelPosition.Outside;
                        gauge.MainScale = scale;
                    }
                }
            }
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Gauges.CircularScale.LabelOffset">
            <summary>
            Gets or sets LabelOffset that decides the offset of Labels in the CircularScale.
            </summary>
             /// <value>
            double
            </value>
            <example>
            <code language="C#">
            using System;
            using System.Collections.Generic;
            using System.IO;
            using System.Linq;
            using Windows.Foundation;
            using Windows.Foundation.Collections;
            using Windows.UI.Xaml;
            using Windows.UI.Xaml.Controls;
            using Windows.UI.Xaml.Controls.Primitives;
            using Windows.UI.Xaml.Data;
            using Windows.UI.Xaml.Input;
            using Windows.UI.Xaml.Media;
            using Windows.UI.Xaml.Navigation;
            using Common;
            using Syncfusion.UI.Xaml.Gauges;
            
            namespace GaugeWinRTSamples
            {
                public sealed partial class GaugePosition :SampleView
                {
                    public GaugePosition()
                    {
                        InitializeComponent();
                        SfCircularGauge gauge = new SfCircularGauge();
                        CircularScale scale = new CircularScale();
                        scale.LabelOffset = 10;
                        gauge.Scales.add(scale);
                    }
                }
            }
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Gauges.CircularScale.TickPosition">
            <summary>
            Gets or sets TickPosition that decides the position of ticks in the CircularScale.
            </summary>
            <remarks>
            The Ticks in the scale can be placed inside the scale, outside or on top of the scale by
            choosing the options avail in the TickPosition property. Options are
            1. Inside (Default) : Places the Ticks inside the scale.
            2. Outside          : Places the Ticks outside the scale.
            3. Cross            : Places the Ticks on top of the scale.
            </remarks>
            <value>
            TickPosition
            </value>
            <example>
            <code language="C#">
            using System;
            using System.Collections.Generic;
            using System.IO;
            using System.Linq;
            using Windows.Foundation;
            using Windows.Foundation.Collections;
            using Windows.UI.Xaml;
            using Windows.UI.Xaml.Controls;
            using Windows.UI.Xaml.Controls.Primitives;
            using Windows.UI.Xaml.Data;
            using Windows.UI.Xaml.Input;
            using Windows.UI.Xaml.Media;
            using Windows.UI.Xaml.Navigation;
            using Common;
            using Syncfusion.UI.Xaml.Gauges;
            
            namespace GaugeWinRTSamples
            {
                public sealed partial class GaugePosition :SampleView
                {
                    public GaugePosition()
                    {
                        InitializeComponent();
                        SfCircularGauge gauge = new SfCircularGauge();
                        CircularScale scale = new CircularScale();
                        scale.TickPosition = TickPosition.Outside;
                        gauge.MainScale = scale;
                    }
                }
            }
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Gauges.CircularScale.MajorTickOffset">
            <summary>
            Gets or sets MajorTickOffset that decides the offset of major ticks in the CircularScale.
            </summary>
             /// <value>
            double
            </value>
            <example>
            <code language="C#">
            using System;
            using System.Collections.Generic;
            using System.IO;
            using System.Linq;
            using Windows.Foundation;
            using Windows.Foundation.Collections;
            using Windows.UI.Xaml;
            using Windows.UI.Xaml.Controls;
            using Windows.UI.Xaml.Controls.Primitives;
            using Windows.UI.Xaml.Data;
            using Windows.UI.Xaml.Input;
            using Windows.UI.Xaml.Media;
            using Windows.UI.Xaml.Navigation;
            using Common;
            using Syncfusion.UI.Xaml.Gauges;
            
            namespace GaugeWinRTSamples
            {
                public sealed partial class GaugePosition :SampleView
                {
                    public GaugePosition()
                    {
                        InitializeComponent();
                        SfCircularGauge gauge = new SfCircularGauge();
                        CircularScale scale = new CircularScale();
                        scale.MajorTickOffset = 10;
                        gauge.Scales.add(scale);
                    }
                }
            }
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Gauges.CircularScale.MinorTickOffset">
            <summary>
            Gets or sets MinorTickOffset that decides the offset of minor ticks in the CircularScale.
            </summary>
             /// <value>
            double
            </value>
            <example>
            <code language="C#">
            using System;
            using System.Collections.Generic;
            using System.IO;
            using System.Linq;
            using Windows.Foundation;
            using Windows.Foundation.Collections;
            using Windows.UI.Xaml;
            using Windows.UI.Xaml.Controls;
            using Windows.UI.Xaml.Controls.Primitives;
            using Windows.UI.Xaml.Data;
            using Windows.UI.Xaml.Input;
            using Windows.UI.Xaml.Media;
            using Windows.UI.Xaml.Navigation;
            using Common;
            using Syncfusion.UI.Xaml.Gauges;
            
            namespace GaugeWinRTSamples
            {
                public sealed partial class GaugePosition :SampleView
                {
                    public GaugePosition()
                    {
                        InitializeComponent();
                        SfCircularGauge gauge = new SfCircularGauge();
                        CircularScale scale = new CircularScale();
                        scale.MinorTickOffset = 10;
                        gauge.Scales.add(scale);
                    }
                }
            }
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Gauges.CircularScale.RangePointerPosition">
            <summary>
            Gets or sets RangePointerPosition that decides the position of RangePointer in the CircularScale.
            </summary>
            <remarks>
            The RangePointer in the scale can be placed inside the scale or outside the scale by
            choosing the options avail in the RangePointerPosition property. Options are
            1. Inside (Default) : Places the RangePointer inside the scale.
            2. Outside          : Places the RangePointer outside the scale.
            </remarks>
            <value>
            RangePointerPosition
            </value>
            <example>
            <code language="C#">
            using System;
            using System.Collections.Generic;
            using System.IO;
            using System.Linq;
            using Windows.Foundation;
            using Windows.Foundation.Collections;
            using Windows.UI.Xaml;
            using Windows.UI.Xaml.Controls;
            using Windows.UI.Xaml.Controls.Primitives;
            using Windows.UI.Xaml.Data;
            using Windows.UI.Xaml.Input;
            using Windows.UI.Xaml.Media;
            using Windows.UI.Xaml.Navigation;
            using Common;
            using Syncfusion.UI.Xaml.Gauges;
            
            namespace GaugeWinRTSamples
            {
                public sealed partial class GaugePosition :SampleView
                {
                    public GaugePosition()
                    {
                        InitializeComponent();
                        SfCircularGauge gauge = new SfCircularGauge();
                        CircularScale scale = new CircularScale();
                        scale.RangePointerPosition = RangePointerPosition.Outside;
                        gauge.MainScale = scale;
                    }
                }
            }
            </code>
            </example>    
        </member>
        <member name="P:Syncfusion.UI.Xaml.Gauges.CircularScale.RangePointerOffset">
            <summary>
            Gets or sets RangePointerOffset that decides the offset of RangePointer in the CircularScale.
            </summary>
            <value>
            double
            </value>
            <example>
            <code language="C#">
            using System;
            using System.Collections.Generic;
            using System.IO;
            using System.Linq;
            using Windows.Foundation;
            using Windows.Foundation.Collections;
            using Windows.UI.Xaml;
            using Windows.UI.Xaml.Controls;
            using Windows.UI.Xaml.Controls.Primitives;
            using Windows.UI.Xaml.Data;
            using Windows.UI.Xaml.Input;
            using Windows.UI.Xaml.Media;
            using Windows.UI.Xaml.Navigation;
            using Common;
            using Syncfusion.UI.Xaml.Gauges;
            
            namespace GaugeWinRTSamples
            {
                public sealed partial class Gauge
                {
                    public Gauge()
                    {
                        InitializeComponent();
                        SfCircularGauge gauge = new SfCircularGauge();
                        CircularScale scale = new CircularScale();
                        scale.RangePointerOffset = 5;
                        gauge.Scales.add(scale);
                    }
                }
            }
            </code>
            </example> 
        </member>
        <member name="P:Syncfusion.UI.Xaml.Gauges.CircularScale.RangePosition">
            <summary>
            Gets or sets RangePosition that decides the position of ranges in the CircularScale.
            </summary>
            <remarks>
            The Ranges in the scale can be placed inside the scale or outside the scale by
            choosing the options avail in the RangePosition property. Options are
            1. Inside (Default) : Places the Ranges inside the scale.
            2. Outside          : Places the Ranges outside the scale.
            3. SetAsScaleRim    : Placed the Ranges on the Scale Rim.
            </remarks>
            <value>
            RangePosition
            </value>
            <example>
            <code language="C#">
            using System;
            using System.Collections.Generic;
            using System.IO;
            using System.Linq;
            using Windows.Foundation;
            using Windows.Foundation.Collections;
            using Windows.UI.Xaml;
            using Windows.UI.Xaml.Controls;
            using Windows.UI.Xaml.Controls.Primitives;
            using Windows.UI.Xaml.Data;
            using Windows.UI.Xaml.Input;
            using Windows.UI.Xaml.Media;
            using Windows.UI.Xaml.Navigation;
            using Common;
            using Syncfusion.UI.Xaml.Gauges;
            
            namespace GaugeWinRTSamples
            {
                public sealed partial class GaugePosition :SampleView
                {
                    public GaugePosition()
                    {
                        InitializeComponent();
                        SfCircularGauge gauge = new SfCircularGauge();
                        CircularScale scale = new CircularScale();
                        scale.RangePosition = RangePosition.Outside;
                        gauge.MainScale = scale;
                    }
                }
            }
            </code>
            </example>    
        </member>
        <member name="P:Syncfusion.UI.Xaml.Gauges.CircularScale.RangeOffset">
            <summary>
            Gets or sets RangeOffset that decides the offset of ranges in the CircularScale.
            </summary>
            <value>
            double
            </value>
            <example>
            <code language="C#">
            using System;
            using System.Collections.Generic;
            using System.IO;
            using System.Linq;
            using Windows.Foundation;
            using Windows.Foundation.Collections;
            using Windows.UI.Xaml;
            using Windows.UI.Xaml.Controls;
            using Windows.UI.Xaml.Controls.Primitives;
            using Windows.UI.Xaml.Data;
            using Windows.UI.Xaml.Input;
            using Windows.UI.Xaml.Media;
            using Windows.UI.Xaml.Navigation;
            using Common;
            using Syncfusion.UI.Xaml.Gauges;
            
            namespace GaugeWinRTSamples
            {
                public sealed partial class Gauge
                {
                    public Gauge()
                    {
                        InitializeComponent();
                        SfCircularGauge gauge = new SfCircularGauge();
                        CircularScale scale = new CircularScale();
                        scale.RangeOffset=2;
                        gauge.Scales.add(scale);
                    }
                }
            }
            </code>
            </example>  
        </member>
        <member name="P:Syncfusion.UI.Xaml.Gauges.CircularScale.RimStartOffset">
            <summary>
            Gets or sets the rim start offset position. Its range is from 0 to 1. 
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Gauges.CircularScale.RimEndOffset">
            <summary>
            Gets or sets the rim end offset position. Its range is from 0 to 1.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Gauges.CircularScale.Ranges">
            <summary>
            Gets or sets the collection of Ranges to the CircularScale.
            </summary>
            <remarks>
            A range is a visual element which begins and ends at specified values within a scale. 
            These start and end values are set by the StartValue and EndValue properties of Range. 
            Range’s UI is customized by the Stroke and StrokeThickness Properties.
            </remarks>
            <value>
            CircularRangeCollection
            </value>
            <example>
            <code language="C#">
            using System;
            using System.Collections.Generic;
            using System.IO;
            using System.Linq;
            using Windows.Foundation;
            using Windows.Foundation.Collections;
            using Windows.UI.Xaml;
            using Windows.UI.Xaml.Controls;
            using Windows.UI.Xaml.Controls.Primitives;
            using Windows.UI.Xaml.Data;
            using Windows.UI.Xaml.Input;
            using Windows.UI.Xaml.Media;
            using Windows.UI.Xaml.Navigation;
            using Common;
            using Syncfusion.UI.Xaml.Gauges;
            
            namespace GaugeWinRTSamples
            {
                public sealed partial class GaugePosition :SampleView
                {
                    public GaugePosition()
                    {
                       InitializeComponent();
                       SfCircularGauge gauge = new SfCircularGauge();
                       CircularRange range1 = new CircularRange();
                       range1.StartValue = 0;
                       range1.EndValue = 40;
                       range1.Stroke = new SolidColorBrush(Colors.Green);
                       range1.StrokeThickness = 10;
                       CircularRange range2 = new CircularRange();
                       range2.StartValue = 40;
                       range2.EndValue = 60;
                       range2.Stroke = new SolidColorBrush(Colors.Yellow);
                       range2.StrokeThickness = 10;
                       CircularRange range3 = new CircularRange();
                       range3.StartValue = 60;
                       range3.EndValue = 100;
                       range3.Stroke = new SolidColorBrush(Colors.Red);
                       range3.StrokeThickness = 10;
                       gauge.MainScale.Ranges.Add(range1);
                       gauge.MainScale.Ranges.Add(range2);
                       gauge.MainScale.Ranges.Add(range3);
                    }
                }
            }
            
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Gauges.CircularScale.Pointers">
            <summary>
            Gets or sets collection of Pointers to the CircularScale.
            </summary>
            <remarks>
            User can add multiple pointers to the gauge to point at multiple values on the
            same scale. This can be useful for showing a low and a high value at the same
            time. Value of the pointer is set by the Value property.
            </remarks>
            <value>
            CircularPointerCollection
            </value>
            <example>
            <code language="C#">
            using System;
            using System.Collections.Generic;
            using System.IO;
            using System.Linq;
            using Windows.Foundation;
            using Windows.Foundation.Collections;
            using Windows.UI.Xaml;
            using Windows.UI.Xaml.Controls;
            using Windows.UI.Xaml.Controls.Primitives;
            using Windows.UI.Xaml.Data;
            using Windows.UI.Xaml.Input;
            using Windows.UI.Xaml.Media;
            using Windows.UI.Xaml.Navigation;
            using Common;
            using Syncfusion.UI.Xaml.Gauges;
            
            namespace GaugeWinRTSamples
            {
                public sealed partial class GaugePosition :SampleView
                {
                    public GaugePosition()
                    {
                       InitializeComponent();
                       SfCircularGauge gauge = new SfCircularGauge();
                       CircularPointer needlePointer = new CircularPointer();
                       needlePointer.Value = 80;
                       needlePointer.PointerType = PointerType.NeedlePointer;
                       needlePointer.EnableAnimation = true;
                       needlePointer.NeedleLengthFactor = 0.5;
                       needlePointer.NeedlePointerStroke = new SolidColorBrush(Colors.White);
                       needlePointer.NeedlePointerStrokeThickness = 2;
                       needlePointer.PointerCapStroke = new SolidColorBrush(Colors.White);
                       needlePointer.PointerCapDiameter = 20;
                       gauge.MainScale.Pointers.Add(needlePointer);
                    }
                }
            }
            
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Gauges.CircularScale.SweepDirection">
            <summary>
            Gets or sets SweepDirection that decides the rendering direction of the elements in CircularScale.
            </summary>
            <remarks>
            SweepDirection property decides in which direction labels and ticks  have to be
            rendered in the CircularScale.
            </remarks>
            <value>
            SweepDirection
            </value>
            <example>
            <code language="C#">
            using System;
            using System.Collections.Generic;
            using System.IO;
            using System.Linq;
            using Windows.Foundation;
            using Windows.Foundation.Collections;
            using Windows.UI.Xaml;
            using Windows.UI.Xaml.Controls;
            using Windows.UI.Xaml.Controls.Primitives;
            using Windows.UI.Xaml.Data;
            using Windows.UI.Xaml.Input;
            using Windows.UI.Xaml.Media;
            using Windows.UI.Xaml.Navigation;
            using Common;
            using Syncfusion.UI.Xaml.Gauges;
            
            namespace GaugeWinRTSamples
            {
                public sealed partial class GaugePosition :SampleView
                {
                    public GaugePosition()
                    {
                        InitializeComponent();
                        SfCircularGauge gauge = new SfCircularGauge();
                        CircularScale scale = new CircularScale();
                        scale.StartAngle = 180;
                        scale.SweepAngle = 180;
                        scale.SweepDirection = SweepDirection.Clockwise;
                        scale.StartValue = 0;
                        scale.EndValue = 100;
                        gauge.MainScale = scale;
                    }
                }
            }
            
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Gauges.CircularScale.SweepAngle">
            <summary>
            Gets or sets the SweepAngle of the CircularScale that decides the shape of the SfCircularGauge
            </summary>
            <remarks>
            By setting the StartAngle, SweepDirection and SweepAngle we can shape the Circular Gauge into 
            Full Circular Gauge, Half Circular Gauge, and Quarter Circular Gauge.
            </remarks>
            <value>
            double
            </value>
            <example>
            <code language="C#">
            using System;
            using System.Collections.Generic;
            using System.IO;
            using System.Linq;
            using Windows.Foundation;
            using Windows.Foundation.Collections;
            using Windows.UI.Xaml;
            using Windows.UI.Xaml.Controls;
            using Windows.UI.Xaml.Controls.Primitives;
            using Windows.UI.Xaml.Data;
            using Windows.UI.Xaml.Input;
            using Windows.UI.Xaml.Media;
            using Windows.UI.Xaml.Navigation;
            using Common;
            using Syncfusion.UI.Xaml.Gauges;
            
            namespace GaugeWinRTSamples
            {
                public sealed partial class GaugePosition :SampleView
                {
                    public GaugePosition()
                    {
                        InitializeComponent();
                        SfCircularGauge gauge = new SfCircularGauge();
                        CircularScale scale = new CircularScale();
                        scale.StartAngle = 180;
                        scale.SweepAngle = 180;
                        scale.SweepDirection = SweepDirection.Clockwise;
                        scale.StartValue = 0;
                        scale.EndValue = 100;
                        gauge.MainScale = scale;
                    }
                }
            }
            
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Gauges.CircularScale.StartAngle">
            <summary>
            Gets or sets the StartAngle of the CircularScale that decides the shape of the SfCircularGauge.
            </summary>
            <remarks>
            By setting the StartAngle, SweepDirection and SweepAngle we can shape the Circular Gauge into 
            Full Circular Gauge, Half Circular Gauge, and Quarter Circular Gauge.
            </remarks>
            <value>
            double
            </value>
            <example>
            <code language="C#">
            using System;
            using System.Collections.Generic;
            using System.IO;
            using System.Linq;
            using Windows.Foundation;
            using Windows.Foundation.Collections;
            using Windows.UI.Xaml;
            using Windows.UI.Xaml.Controls;
            using Windows.UI.Xaml.Controls.Primitives;
            using Windows.UI.Xaml.Data;
            using Windows.UI.Xaml.Input;
            using Windows.UI.Xaml.Media;
            using Windows.UI.Xaml.Navigation;
            using Common;
            using Syncfusion.UI.Xaml.Gauges;
            
            namespace GaugeWinRTSamples
            {
                public sealed partial class GaugePosition :SampleView
                {
                    public GaugePosition()
                    {
                        InitializeComponent();
                        SfCircularGauge gauge = new SfCircularGauge();
                        CircularScale scale = new CircularScale();
                        scale.StartAngle = 180;
                        scale.SweepAngle = 180;
                        scale.SweepDirection = SweepDirection.Clockwise;
                        scale.StartValue = 0;
                        scale.EndValue = 100;
                        gauge.MainScale = scale;
                    }
                }
            }
            
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Gauges.CircularScale.EndPoint">
            <summary>
            Gets EndPoint of the CircularScale.
            </summary>
            <remarks>
            EndPoint is a read only property used to get the value of the EndPoint.
            </remarks>
            <value>
            Point
            </value>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Gauges.CircularScale.StartPoint">
            <summary>
            Gets or sets StartPoint of the CircularScale.
            </summary>
            <remarks>
            StartPoint is a read only property used to get the value of the StartPoint.
            </remarks>
            <value>
            Point
            </value>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Gauges.CircularScale.BindRangeStrokeToLabels">
            <summary>
            Gets or sets a value indicating whether the Range Stroke applied to Labels
            Stroke
            </summary>
            <remarks>
            <para>The Scale should have atleast one range to make the property
            effective.</para>
            <para>Value as<b>True: </b>Range Stroke is applied to the labels which are in
            the appropriate range.</para>
            <para>Value as<b>False: </b>Default or user defined Stroke is applied to the
            labels.</para>
            </remarks>
            <value>
            <see langword="true"/> if ; otherwise, <see langword="false"/>.
            </value>
            <example>
            <code language="C#">
            using System;
            using System.Collections.Generic;
            using System.IO;
            using System.Linq;
            using Windows.Foundation;
            using Windows.Foundation.Collections;
            using Windows.UI.Xaml;
            using Windows.UI.Xaml.Controls;
            using Windows.UI.Xaml.Controls.Primitives;
            using Windows.UI.Xaml.Data;
            using Windows.UI.Xaml.Input;
            using Windows.UI.Xaml.Media;
            using Windows.UI.Xaml.Navigation;
            using Common;
            using Syncfusion.UI.Xaml.Gauges;
            
            namespace GaugeWinRTSamples
            {
                public sealed partial class GaugePosition :SampleView
                {
                    public GaugePosition()
                    {
                        InitializeComponent();
                        SfCircularGauge gauge = new SfCircularGauge();
                        CircularScale scale = new CircularScale();
                        scale.BindRangeStrokeToLabels = true;
                        scale.BindRangeStrokeToTicks = true;
                        CircularRange range1 = new CircularRange();
                        range1.StartValue = 0;
                        range1.EndValue = 40;
                        range1.Stroke = new SolidColorBrush(Colors.Green);
                        range1.StrokeThickness = 10;
                        CircularRange range2 = new CircularRange();
                        range2.StartValue = 40;
                        range2.EndValue = 60;
                        range2.Stroke = new SolidColorBrush(Colors.Yellow);
                        range2.StrokeThickness = 10;
                        CircularRange range3 = new CircularRange();
                        range3.StartValue = 60;
                        range3.EndValue = 100;
                        range3.Stroke = new SolidColorBrush(Colors.Red);
                        range3.StrokeThickness = 10;
                        scale.Ranges.Add(range1);
                        scale.Ranges.Add(range2);
                        scale.Ranges.Add(range3);
                        gauge.MainScale = scale;
            
                    }
                }
            }
            
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Gauges.CircularScale.BindRangeStrokeToTicks">
            <summary>
            Gets or sets a value indicating whether the Range Stroke applied to Ticks
            Stroke
            </summary>
            <remarks>
            <para>The Scale should have atleast one range to make the property
            effective.</para>
            <para>Value as<b>True: </b>Range Stroke is applied to the Ticks which are in
            the appropriate range.</para>
            <para>Value as<b>False: </b>Default or user defined Stroke is applied to the
            Ticks.</para>
            </remarks>
            <value>
            <see langword="true"/> if ; otherwise, <see langword="false"/>.
            </value>
            <example>
            <code language="C#">
            using System;
            using System.Collections.Generic;
            using System.IO;
            using System.Linq;
            using Windows.Foundation;
            using Windows.Foundation.Collections;
            using Windows.UI.Xaml;
            using Windows.UI.Xaml.Controls;
            using Windows.UI.Xaml.Controls.Primitives;
            using Windows.UI.Xaml.Data;
            using Windows.UI.Xaml.Input;
            using Windows.UI.Xaml.Media;
            using Windows.UI.Xaml.Navigation;
            using Common;
            using Syncfusion.UI.Xaml.Gauges;
            
            namespace GaugeWinRTSamples
            {
                public sealed partial class GaugePosition :SampleView
                {
                    public GaugePosition()
                    {
                        InitializeComponent();
                        SfCircularGauge gauge = new SfCircularGauge();
                        CircularScale scale = new CircularScale();
                        scale.BindRangeStrokeToLabels = true;
                        scale.BindRangeStrokeToTicks = true;
                        CircularRange range1 = new CircularRange();
                        range1.StartValue = 0;
                        range1.EndValue = 40;
                        range1.Stroke = new SolidColorBrush(Colors.Green);
                        range1.StrokeThickness = 10;
                        CircularRange range2 = new CircularRange();
                        range2.StartValue = 40;
                        range2.EndValue = 60;
                        range2.Stroke = new SolidColorBrush(Colors.Yellow);
                        range2.StrokeThickness = 10;
                        CircularRange range3 = new CircularRange();
                        range3.StartValue = 60;
                        range3.EndValue = 100;
                        range3.Stroke = new SolidColorBrush(Colors.Red);
                        range3.StrokeThickness = 10;
                        scale.Ranges.Add(range1);
                        scale.Ranges.Add(range2);
                        scale.Ranges.Add(range3);
                        gauge.MainScale = scale;
            
                    }
                }
            }
            
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Gauges.CircularScale.TickLength">
            <summary>
            Gets or sets value that decides the length of the ticks in the CircularScale.
            </summary>
            <value>
            double
            </value>
            <example>
            <code language="C#">
            using System;
            using System.Collections.Generic;
            using System.IO;
            using System.Linq;
            using Windows.Foundation;
            using Windows.Foundation.Collections;
            using Windows.UI.Xaml;
            using Windows.UI.Xaml.Controls;
            using Windows.UI.Xaml.Controls.Primitives;
            using Windows.UI.Xaml.Data;
            using Windows.UI.Xaml.Input;
            using Windows.UI.Xaml.Media;
            using Windows.UI.Xaml.Navigation;
            using Common;
            using Syncfusion.UI.Xaml.Gauges;
            
            namespace GaugeWinRTSamples
            {
                public sealed partial class GaugePosition :SampleView
                {
                    public GaugePosition()
                    {
                       InitializeComponent();
                       SfCircularGauge gauge = new SfCircularGauge();
                       CircularScale scale = new CircularScale();
                       scale.TickLength = 10;
                       gauge.MainScale = scale;
                    }
                }
            }
            
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Gauges.CircularScale.SmallTickLength">
            <summary>
            Gets or sets value that decides the length of the small ticks in the CircularScale.
            </summary>
            <value>
            double
            </value>
            <example>
            <code language="C#">
            using System;
            using System.Collections.Generic;
            using System.IO;
            using System.Linq;
            using Windows.Foundation;
            using Windows.Foundation.Collections;
            using Windows.UI.Xaml;
            using Windows.UI.Xaml.Controls;
            using Windows.UI.Xaml.Controls.Primitives;
            using Windows.UI.Xaml.Data;
            using Windows.UI.Xaml.Input;
            using Windows.UI.Xaml.Media;
            using Windows.UI.Xaml.Navigation;
            using Common;
            using Syncfusion.UI.Xaml.Gauges;
            
            namespace GaugeWinRTSamples
            {
                public sealed partial class GaugePosition :SampleView
                {
                    public GaugePosition()
                    {
                       InitializeComponent();
                       SfCircularGauge gauge = new SfCircularGauge();
                       CircularScale scale = new CircularScale();
                       scale.SmallTickLength = 10;
                       gauge.MainScale = scale;
                    }
                }
            }
            
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Gauges.CircularScale.TickStroke">
            <summary>
            Gets or sets the brush that describes the TickStroke of the CircularScale.
            </summary>
            <remarks>
            TickStroke property will remains effective until the value of the
            BindRangeStrokeToTicks property is false.
            </remarks>
            <value>
            Brush
            </value>
            <example>
            <code language="C#">
            using System;
            using System.Collections.Generic;
            using System.IO;
            using System.Linq;
            using Windows.Foundation;
            using Windows.Foundation.Collections;
            using Windows.UI.Xaml;
            using Windows.UI.Xaml.Controls;
            using Windows.UI.Xaml.Controls.Primitives;
            using Windows.UI.Xaml.Data;
            using Windows.UI.Xaml.Input;
            using Windows.UI.Xaml.Media;
            using Windows.UI.Xaml.Navigation;
            using Common;
            using Syncfusion.UI.Xaml.Gauges;
            
            namespace GaugeWinRTSamples
            {
                public sealed partial class GaugePosition :SampleView
                {
                    public GaugePosition()
                    {
                        InitializeComponent();
                        SfCircularGauge gauge = new SfCircularGauge();
                        CircularScale scale = new CircularScale();
                        scale.TickStroke = new SolidColorBrush(Colors.Red);
                        gauge.MainScale = scale;
                    }
                }
            }
            
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Gauges.CircularScale.LabelStroke">
            <summary>
            Gets or sets the brush that describes the Stroke value of the Labels.
            </summary>
            <remarks>
            LabelStroke property will remains effective until the value of the
            BindRangeStrokeToLabels property is false.
            </remarks>
            <value>
            Brush
            </value>
            <example>
            <code language="C#">
            using System;
            using System.Collections.Generic;
            using System.IO;
            using System.Linq;
            using Windows.Foundation;
            using Windows.Foundation.Collections;
            using Windows.UI.Xaml;
            using Windows.UI.Xaml.Controls;
            using Windows.UI.Xaml.Controls.Primitives;
            using Windows.UI.Xaml.Data;
            using Windows.UI.Xaml.Input;
            using Windows.UI.Xaml.Media;
            using Windows.UI.Xaml.Navigation;
            using Common;
            using Syncfusion.UI.Xaml.Gauges;
            
            namespace GaugeWinRTSamples
            {
                public sealed partial class GaugePosition :SampleView
                {
                    public GaugePosition()
                    {
                        InitializeComponent();
                        SfCircularGauge gauge = new SfCircularGauge();
                        CircularScale scale = new CircularScale();
                        scale.LabelStroke = new SolidColorBrush(Colors.Red);
                        gauge.MainScale = scale;
                    }
                }
            }
            
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Gauges.CircularScale.LabelAutoSizeChange">
            <summary>
            Gets or sets the Boolean property that allow user to decided whether the gauge label can resize automatically.
            </summary>
            <remarks>
            LabelAutoSizeChange property will remains effective until the user set it to false.
            </remarks>
            <value>
            bool
            </value>
            <example>
            <code language="C#">
            using System;
            using System.Collections.Generic;
            using System.IO;
            using System.Linq;
            using Windows.Foundation;
            using Windows.Foundation.Collections;
            using Windows.UI.Xaml;
            using Windows.UI.Xaml.Controls;
            using Windows.UI.Xaml.Controls.Primitives;
            using Windows.UI.Xaml.Data;
            using Windows.UI.Xaml.Input;
            using Windows.UI.Xaml.Media;
            using Windows.UI.Xaml.Navigation;
            using Common;
            using Syncfusion.UI.Xaml.Gauges;
            
            namespace GaugeWinRTSamples
            {
                public sealed partial class GaugePosition :SampleView
                {
                    public GaugePosition()
                    {
                        InitializeComponent();
                        SfCircularGauge gauge = new SfCircularGauge();
                        CircularScale scale = new CircularScale();
                        scale.LabelAutoSizeChange = true;
                        gauge.MainScale = scale;
                    }
                }
            }
            
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Gauges.CircularScale.LabelPostfix">
            <summary>
            Gets or sets the LabelPostfix value that can attached at the end of the labels.
            </summary>
            <remarks>
            Used to add some extentions to the labels like % symbol can be added to labels
            while displaying the percentage values in SfCircularGauge.
            </remarks>
            <value>
            string
            </value>
            <example>
            <code language="C#">
            using System;
            using System.Collections.Generic;
            using System.IO;
            using System.Linq;
            using Windows.Foundation;
            using Windows.Foundation.Collections;
            using Windows.UI.Xaml;
            using Windows.UI.Xaml.Controls;
            using Windows.UI.Xaml.Controls.Primitives;
            using Windows.UI.Xaml.Data;
            using Windows.UI.Xaml.Input;
            using Windows.UI.Xaml.Media;
            using Windows.UI.Xaml.Navigation;
            using Common;
            using Syncfusion.UI.Xaml.Gauges;
            
            namespace GaugeWinRTSamples
            {
                public sealed partial class GaugePosition :SampleView
                {
                    public GaugePosition()
                    {
                        InitializeComponent();
                        SfCircularGauge gauge = new SfCircularGauge();
                        CircularScale scale = new CircularScale();
                        scale.LabelPostfix="%";
                        gauge.MainScale = scale;
                    }
                }
            }
            
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Gauges.CircularScale.LabelPrefix">
            <summary>
            Gets or sets the LabelPrefix value that can be added before the labels.
            </summary>
            <remarks>
            Used to add some prefix to the labels like $ symbol can be added to labels
            while displaying the dollar values in SfCircularGauge.
            </remarks>
            <value>
            string
            </value>
            <example>
            <code language="C#">
            using System;
            using System.Collections.Generic;
            using System.IO;
            using System.Linq;
            using Windows.Foundation;
            using Windows.Foundation.Collections;
            using Windows.UI.Xaml;
            using Windows.UI.Xaml.Controls;
            using Windows.UI.Xaml.Controls.Primitives;
            using Windows.UI.Xaml.Data;
            using Windows.UI.Xaml.Input;
            using Windows.UI.Xaml.Media;
            using Windows.UI.Xaml.Navigation;
            using Common;
            using Syncfusion.UI.Xaml.Gauges;
            
            namespace GaugeWinRTSamples
            {
                public sealed partial class GaugePosition :SampleView
                {
                    public GaugePosition()
                    {
                        InitializeComponent();
                        SfCircularGauge gauge = new SfCircularGauge();
                        CircularScale scale = new CircularScale();
                        scale.LabelPrefix="$";
                        gauge.MainScale = scale;
                    }
                }
            }
            
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Gauges.CircularScale.SmallTickStroke">
            <summary>
            Gets or sets the brush that describes the SmallTickStroke of the CircularScale.
            </summary>
            <remarks>
            SmallTickStroke property will remains effective until the value of the
            BindRangeStrokeToTicks property is false.
            </remarks>
            <value>
            Brush
            </value>
            <example>
            <code language="C#">
            using System;
            using System.Collections.Generic;
            using System.IO;
            using System.Linq;
            using Windows.Foundation;
            using Windows.Foundation.Collections;
            using Windows.UI.Xaml;
            using Windows.UI.Xaml.Controls;
            using Windows.UI.Xaml.Controls.Primitives;
            using Windows.UI.Xaml.Data;
            using Windows.UI.Xaml.Input;
            using Windows.UI.Xaml.Media;
            using Windows.UI.Xaml.Navigation;
            using Common;
            using Syncfusion.UI.Xaml.Gauges;
            
            namespace GaugeWinRTSamples
            {
                public sealed partial class GaugePosition :SampleView
                {
                    public GaugePosition()
                    {
                        InitializeComponent();
                        SfCircularGauge gauge = new SfCircularGauge();
                        CircularScale scale = new CircularScale();
                        scale.SmallTickStroke = new SolidColorBrush(Colors.Red);
                        gauge.MainScale = scale;
                    }
                }
            }
            
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Gauges.CircularScale.TickStrokeThickness">
            <summary>
            Gets or sets the thickness of the TickStroke.
            </summary>
            <value>
            double
            </value>
            <example>
            <code language="C#">
            using System;
            using System.Collections.Generic;
            using System.IO;
            using System.Linq;
            using Windows.Foundation;
            using Windows.Foundation.Collections;
            using Windows.UI.Xaml;
            using Windows.UI.Xaml.Controls;
            using Windows.UI.Xaml.Controls.Primitives;
            using Windows.UI.Xaml.Data;
            using Windows.UI.Xaml.Input;
            using Windows.UI.Xaml.Media;
            using Windows.UI.Xaml.Navigation;
            using Common;
            using Syncfusion.UI.Xaml.Gauges;
            
            namespace GaugeWinRTSamples
            {
                public sealed partial class GaugePosition :SampleView
                {
                    public GaugePosition()
                    {
                       InitializeComponent();
                       SfCircularGauge gauge = new SfCircularGauge();
                       CircularScale scale = new CircularScale();
                       scale.TickStrokeThickness =3;
                       gauge.MainScale = scale;
                    }
                }
            }
            
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Gauges.CircularScale.SmallTickStrokeThickness">
            <summary>
            Gets or sets the thickness of the  SmallTickStroke.
            </summary>
            <value>
            double
            </value>
            <example>
            <code language="C#">
            using System;
            using System.Collections.Generic;
            using System.IO;
            using System.Linq;
            using Windows.Foundation;
            using Windows.Foundation.Collections;
            using Windows.UI.Xaml;
            using Windows.UI.Xaml.Controls;
            using Windows.UI.Xaml.Controls.Primitives;
            using Windows.UI.Xaml.Data;
            using Windows.UI.Xaml.Input;
            using Windows.UI.Xaml.Media;
            using Windows.UI.Xaml.Navigation;
            using Common;
            using Syncfusion.UI.Xaml.Gauges;
            
            namespace GaugeWinRTSamples
            {
                public sealed partial class GaugePosition :SampleView
                {
                    public GaugePosition()
                    {
                       InitializeComponent();
                       SfCircularGauge gauge = new SfCircularGauge();
                       CircularScale scale = new CircularScale();
                       scale.SmallTickStrokeThickness =3;
                       gauge.MainScale = scale;
                    }
                }
            }
            
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Gauges.CircularScale.StartValue">
            <summary>
            Gets or sets the StartValue of the CircularScale that decides the overall range of the scale.
            </summary>
            <remarks>
            StartValue and EndValue properties will decides the overall range of the
            Circular Rim
            </remarks>
            <value>
            double
            </value>
            <example>
            <code language="C#">
            using System;
            using System.Collections.Generic;
            using System.IO;
            using System.Linq;
            using Windows.Foundation;
            using Windows.Foundation.Collections;
            using Windows.UI.Xaml;
            using Windows.UI.Xaml.Controls;
            using Windows.UI.Xaml.Controls.Primitives;
            using Windows.UI.Xaml.Data;
            using Windows.UI.Xaml.Input;
            using Windows.UI.Xaml.Media;
            using Windows.UI.Xaml.Navigation;
            using Common;
            using Syncfusion.UI.Xaml.Gauges;
            
            namespace GaugeWinRTSamples
            {
                public sealed partial class GaugePosition :SampleView
                {
                    public GaugePosition()
                    {
                        InitializeComponent();
                        SfCircularGauge gauge = new SfCircularGauge();
                        CircularScale scale = new CircularScale();
                        scale.StartAngle = 180;
                        scale.SweepAngle = 180;
                        scale.SweepDirection = SweepDirection.Clockwise;
                        scale.StartValue = 0;
                        scale.EndValue = 100;
                        scale.RimStroke = new SolidColorBrush(Colors.Black);
                        scale.RimStrokeThickness =3;
                        gauge.MainScale = scale;
                    }
                }
            }
            
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Gauges.CircularScale.EndValue">
            <summary>
            Gets or sets the EndValue of the CircularScale that decides the overall range of the scale.
            </summary>
            <remarks>
            StartValue and EndValue properties will decides the overall range of the
            Circular Rim
            </remarks>
            <value>
            double
            </value>
            <example>
            <code language="C#">
            using System;
            using System.Collections.Generic;
            using System.IO;
            using System.Linq;
            using Windows.Foundation;
            using Windows.Foundation.Collections;
            using Windows.UI.Xaml;
            using Windows.UI.Xaml.Controls;
            using Windows.UI.Xaml.Controls.Primitives;
            using Windows.UI.Xaml.Data;
            using Windows.UI.Xaml.Input;
            using Windows.UI.Xaml.Media;
            using Windows.UI.Xaml.Navigation;
            using Common;
            using Syncfusion.UI.Xaml.Gauges;
            
            namespace GaugeWinRTSamples
            {
                public sealed partial class GaugePosition :SampleView
                {
                    public GaugePosition()
                    {
                        InitializeComponent();
                        SfCircularGauge gauge = new SfCircularGauge();
                        CircularScale scale = new CircularScale();
                        scale.StartAngle = 180;
                        scale.SweepAngle = 180;
                        scale.SweepDirection = SweepDirection.Clockwise;
                        scale.StartValue = 0;
                        scale.EndValue = 100;
                        scale.RimStroke = new SolidColorBrush(Colors.Black);
                        scale.RimStrokeThickness =3;
                        gauge.MainScale = scale;
                    }
                }
            }
            
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Gauges.CircularScale.Interval">
            <summary>
            Gets or sets the Interval value of the CircularScale that used to calculate the Tick count.
            </summary>
            <remarks>
            Interval property is used to calculate the Tick count for a scale based on
            StartValue and EndValue.
            </remarks>
            <value>
            double
            </value>
            <example>
            <code language="C#">
            using System;
            using System.Collections.Generic;
            using System.IO;
            using System.Linq;
            using Windows.Foundation;
            using Windows.Foundation.Collections;
            using Windows.UI.Xaml;
            using Windows.UI.Xaml.Controls;
            using Windows.UI.Xaml.Controls.Primitives;
            using Windows.UI.Xaml.Data;
            using Windows.UI.Xaml.Input;
            using Windows.UI.Xaml.Media;
            using Windows.UI.Xaml.Navigation;
            using Common;
            using Syncfusion.UI.Xaml.Gauges;
            
            namespace GaugeWinRTSamples
            {
                public sealed partial class GaugePosition :SampleView
                {
                    public GaugePosition()
                    {
                        InitializeComponent();
                        SfCircularGauge gauge = new SfCircularGauge();
                        CircularScale scale = new CircularScale();
                        scale.Interval = 20;
                        gauge.MainScale = scale;
                    }
                }
            }
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Gauges.CircularScale.MinorTicksPerInterval">
            <summary>
            Gets or sets the value that used to calculate the MinorTicks count in the scale.
            </summary>
            <remarks>
            MinorTicksPerInterval property is used to calculate the MinorTicks count for 
            a scale based on StartValue and EndValue.
            </remarks>
            <value>
            double
            </value>
            <example>
            <code language="C#">
            using System;
            using System.Collections.Generic;
            using System.IO;
            using System.Linq;
            using Windows.Foundation;
            using Windows.Foundation.Collections;
            using Windows.UI.Xaml;
            using Windows.UI.Xaml.Controls;
            using Windows.UI.Xaml.Controls.Primitives;
            using Windows.UI.Xaml.Data;
            using Windows.UI.Xaml.Input;
            using Windows.UI.Xaml.Media;
            using Windows.UI.Xaml.Navigation;
            using Common;
            using Syncfusion.UI.Xaml.Gauges;
            
            namespace GaugeWinRTSamples
            {
                public sealed partial class GaugePosition :SampleView
                {
                    public GaugePosition()
                    {
                        InitializeComponent();
                        SfCircularGauge gauge = new SfCircularGauge();
                        CircularScale scale = new CircularScale();
                        scale.MinorTicksPerInterval = 2;
                        gauge.MainScale = scale;
                    }
                }
            }
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Gauges.CircularScale.ShowFirstLabel">
            <summary>
            Gets or sets boolean to enable or disable first label.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Gauges.CircularScale.ShowLastLabel">
            <summary>
            Gets or sets boolean to enable or disable last label.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Gauges.CircularScale.TickShape">
             <summary>
             Gets or sets the shape of the circular scale's tick.
             </summary>
             <remarks>
             The shape of the Scales Major and Minor ticks can be set by using TickShape property and
             it’s includes following option.
            Ellipse , Rectangle ,Triangle
            The default value of TickShape property is TickShape.Rectangle.
             </remarks>
             <value>
             TickShape
             </value>
             <example>
             <code language="C#">
             using System;
             using System.Collections.Generic;
             using System.IO;
             using System.Linq;
             using Windows.Foundation;
             using Windows.Foundation.Collections;
             using Windows.UI.Xaml;
             using Windows.UI.Xaml.Controls;
             using Windows.UI.Xaml.Controls.Primitives;
             using Windows.UI.Xaml.Data;
             using Windows.UI.Xaml.Input;
             using Windows.UI.Xaml.Media;
             using Windows.UI.Xaml.Navigation;
             using Common;
             using Syncfusion.UI.Xaml.Gauges;
             
             namespace GaugeWinRTSamples
             {
                 public sealed partial class GaugePosition :SampleView
                 {
                     public GaugePosition()
                     {
                         InitializeComponent();
                         SfCircularGauge gauge = new SfCircularGauge();
                         CircularScale scale = new CircularScale();
                         scale.TickShape = TickShape.Rectangle;
                         gauge.MainScale = scale;
                     }
                 }
             }
             </code>
             </example>    
        </member>
        <member name="P:Syncfusion.UI.Xaml.Gauges.CircularScale.Radius">
            <summary>
            Gets or sets the radius of the CircularScale.
            </summary>
            <value>
            double
            </value>
            <example>
            <code language="C#">
            using System;
            using System.Collections.Generic;
            using System.IO;
            using System.Linq;
            using Windows.Foundation;
            using Windows.Foundation.Collections;
            using Windows.UI.Xaml;
            using Windows.UI.Xaml.Controls;
            using Windows.UI.Xaml.Controls.Primitives;
            using Windows.UI.Xaml.Data;
            using Windows.UI.Xaml.Input;
            using Windows.UI.Xaml.Media;
            using Windows.UI.Xaml.Navigation;
            using Common;
            using Syncfusion.UI.Xaml.Gauges;
            
            namespace GaugeWinRTSamples
            {
                public sealed partial class GaugePosition :SampleView
                {
                    public GaugePosition()
                    {
                       InitializeComponent();
                       SfCircularGauge gauge = new SfCircularGauge();
                       CircularScale scale = new CircularScale();
                       scale.Radius = 200;
                       gauge.MainScale = scale;
                    }
                }
            }
            
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Gauges.CircularScale.MajorTickSettings">
            <summary>
            Gets or sets the settings to customize the major ticks properties of circular scale.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Gauges.CircularScale.MinorTickSettings">
            <summary>
            Gets or sets the settings to customize the major ticks properties of circular scale.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Gauges.CircularScale.IsLogarithmic">
            <summary>
            Gets or sets a value indicating whether the label values should be logarithm
            </summary>
            <value>
            bool
            </value>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Gauges.CircularScale.LogBase">
            <summary>
            Gets or sets the base of the log.
            </summary>
            <value>
            int
            </value>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Gauges.CircularScale.LogExponentInterval">
            <summary>
            Gets or sets the exponential interval of the log.
            </summary>
            <value>
            int
            </value>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Gauges.CircularScale.IsLogLabelSuperscriptEnabled">
            <summary>
            Gets or sets a value indicating whether the label values should be super script enabled
            </summary>
            <value>
            bool
            </value>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Gauges.CircularScale.ClockWiseStartAngle">
            <summary>
            Gets or set the start angle.
            </summary>
        </member>
        <member name="E:Syncfusion.UI.Xaml.Gauges.CircularScale.LabelCreated">
            <summary>
            Raise the event when creating label to change the content of label.
            </summary>
        </member>
        <member name="T:Syncfusion.UI.Xaml.Gauges.LabelCreatedEventArgs">
            <summary>
            Represent the scale’s LabelCreated event arguments.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Gauges.LabelCreatedEventArgs.LabelText">
            <summary>
            Gets or sets a text to change the scale label in LabelCreated event.
            </summary>
        </member>
        <member name="T:Syncfusion.UI.Xaml.Gauges.CircularScaleLabel">
            <summary>
            It helps the user to display scale labels that associate a numeric value with
            major scale tick marks
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Gauges.CircularScaleLabel.#ctor">
            <summary>
            Initializes a new instance of the <see
            cref="T:Syncfusion.UI.Xaml.Gauges.CircularScaleLabel"/> class.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Gauges.CircularScaleLabel.Content">
            <summary>
            Gets or sets the label has to be displayed.
            </summary>
            <value>
            object
            </value>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Gauges.CircularScaleLabel.Foreground">
            <summary>
            Gets or sets the brush that describes the Foreground of the CircularScaleLabel.
            </summary>
            <value>
            Brush
            </value>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Gauges.CircularScaleLabel.Angle">
            <summary>
            Gets or sets the Angle of the CircularScaleLabel.
            </summary>
            <value>
            double
            </value>
        </member>
        <member name="T:Syncfusion.UI.Xaml.Gauges.CircularScaleLabelCollection">
            <summary>
             It is a collection that contains a set of Labels that denote a numeric value of
            a major tick.
            </summary>
        </member>
        <member name="T:Syncfusion.UI.Xaml.Gauges.CircularScaleTick">
            <summary>
            It helps the user to display ticks that helps to identify the gauge’s data value
            by marking the gauge scale into regular increments
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Gauges.CircularScaleTick.#ctor">
            <summary>
            Initializes a new instance of the <see
            cref="T:Syncfusion.UI.Xaml.Gauges.CircularScaleTick"/> class.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Gauges.CircularScaleTick.TickShape">
            <summary>
            Gets or sets value that decides the shape of the Ticks.
            </summary>
            <value>
            double
            </value>
            <example>
            <code language="C#">
            using System;
            using System.Collections.Generic;
            using System.IO;
            using System.Linq;
            using Windows.Foundation;
            using Windows.Foundation.Collections;
            using Windows.UI.Xaml;
            using Windows.UI.Xaml.Controls;
            using Windows.UI.Xaml.Controls.Primitives;
            using Windows.UI.Xaml.Data;
            using Windows.UI.Xaml.Input;
            using Windows.UI.Xaml.Media;
            using Windows.UI.Xaml.Navigation;
            using Common;
            using Syncfusion.UI.Xaml.Gauges;
            
            namespace GaugeWinRTSamples
            {
                public sealed partial class GaugePosition :SampleView
                {
                    public GaugePosition()
                    {
                       InitializeComponent();
                       SfCircularGauge gauge = new SfCircularGauge();
                       CircularScale scale = new CircularScale();
                       scale.TickShape=TickShape.Rectangle;
                       scale.TickLength = 10;
                       gauge.MainScale = scale;
                    }
                }
            }
            
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Gauges.CircularScaleTick.Length">
            <summary>
            Gets or sets value that decides the length of the Ticks.
            </summary>
            <value>
            double
            </value>
            <example>
            <code language="C#">
            using System;
            using System.Collections.Generic;
            using System.IO;
            using System.Linq;
            using Windows.Foundation;
            using Windows.Foundation.Collections;
            using Windows.UI.Xaml;
            using Windows.UI.Xaml.Controls;
            using Windows.UI.Xaml.Controls.Primitives;
            using Windows.UI.Xaml.Data;
            using Windows.UI.Xaml.Input;
            using Windows.UI.Xaml.Media;
            using Windows.UI.Xaml.Navigation;
            using Common;
            using Syncfusion.UI.Xaml.Gauges;
            
            namespace GaugeWinRTSamples
            {
                public sealed partial class GaugePosition :SampleView
                {
                    public GaugePosition()
                    {
                       InitializeComponent();
                       SfCircularGauge gauge = new SfCircularGauge();
                       CircularScale scale = new CircularScale();
                       scale.TickLength = 10;
                       gauge.MainScale = scale;
                    }
                }
            }
            
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Gauges.CircularScaleTick.HalfLength">
            <summary>
            Gets HalfLength of the CircularScaleTick used to position the Ticks.
            </summary>
            <remarks>
            HalfLength is a read only property used to get the value of the HalfLength.
            </remarks>
            <value>
            Point
            </value>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Gauges.CircularScaleTick.TickStroke">
            <summary>
            Gets or sets the brush that describes the TickStroke of the CircularScaleTick.
            </summary>
            <remarks>
            TickStroke property will remains effective until the value of the
            BindRangeStrokeToTicks property is false.
            </remarks>
            <value>
            Brush
            </value>
            <example>
            <code language="C#">
            using System;
            using System.Collections.Generic;
            using System.IO;
            using System.Linq;
            using Windows.Foundation;
            using Windows.Foundation.Collections;
            using Windows.UI.Xaml;
            using Windows.UI.Xaml.Controls;
            using Windows.UI.Xaml.Controls.Primitives;
            using Windows.UI.Xaml.Data;
            using Windows.UI.Xaml.Input;
            using Windows.UI.Xaml.Media;
            using Windows.UI.Xaml.Navigation;
            using Common;
            using Syncfusion.UI.Xaml.Gauges;
            
            namespace GaugeWinRTSamples
            {
                public sealed partial class GaugePosition :SampleView
                {
                    public GaugePosition()
                    {
                        InitializeComponent();
                        SfCircularGauge gauge = new SfCircularGauge();
                        CircularScale scale = new CircularScale();
                        scale.TickStroke = new SolidColorBrush(Colors.Red);
                        gauge.MainScale = scale;
                    }
                }
            }
            
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Gauges.CircularScaleTick.TickStrokeThickness">
            <summary>
            Gets or sets the thickness of the TickStroke of the CircularScaleTick.
            </summary>
            <value>
            double
            </value>
            <example>
            <code language="C#">
            using System;
            using System.Collections.Generic;
            using System.IO;
            using System.Linq;
            using Windows.Foundation;
            using Windows.Foundation.Collections;
            using Windows.UI.Xaml;
            using Windows.UI.Xaml.Controls;
            using Windows.UI.Xaml.Controls.Primitives;
            using Windows.UI.Xaml.Data;
            using Windows.UI.Xaml.Input;
            using Windows.UI.Xaml.Media;
            using Windows.UI.Xaml.Navigation;
            using Common;
            using Syncfusion.UI.Xaml.Gauges;
            
            namespace GaugeWinRTSamples
            {
                public sealed partial class GaugePosition :SampleView
                {
                    public GaugePosition()
                    {
                       InitializeComponent();
                       SfCircularGauge gauge = new SfCircularGauge();
                       CircularScale scale = new CircularScale();
                       scale.TickStrokeThickness =3;
                       gauge.MainScale = scale;
                    }
                }
            }
            
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Gauges.CircularScaleTick.Angle">
            <summary>
            Gets or sets the Angle of the CircularScaleTick.
            </summary>
            <value>
            double
            </value>
        </member>
        <member name="T:Syncfusion.UI.Xaml.Gauges.CircularScaleTickCollection">
            <summary>
            It is a collection that contains a set of Ticks that helps to identify the gauge’s data value
            by marking the gauge scale into regular increments
            </summary>
        </member>
        <member name="T:Syncfusion.UI.Xaml.Gauges.SquaredPanel">
            <summary>
            SquaredPanel is used to arrange SfCircularGauge. To arrange the squared panel, create an instance of SquaredPanel, and set required properties.
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Gauges.SquaredPanel.#ctor">
            <summary>
            Initializes a new instance of the <see
            cref="T:Syncfusion.UI.Xaml.Gauges.SquaredPanel"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Gauges.SquaredPanel.GetSpacing(System.Windows.DependencyObject)">
            <summary>
             Returns the SpacingProperty value of the DependencyObject that used to arrange
            and position the DependencyObject
            </summary>
            <param name="obj"></param>
            <returns>
            <para>Type: double</para>
            <para>It returns the SpacingProperty value of the DependencyObject.</para>
            </returns>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Gauges.SquaredPanel.SetSpacing(System.Windows.DependencyObject,System.Double)">
            <summary>
             Sets the value of a SpacingProperty, specified by its SpacingProperty
            identifier.
            </summary>
            <param name="obj"></param>
            <param name="value"></param>
        </member>
        <member name="T:Syncfusion.UI.Xaml.Gauges.TickLinesPanel">
            <summary>
            TickLinesPanel is used to arrange TickLines. To arrange the panel, create an instance of the <see cref="T:Syncfusion.UI.Xaml.Gauges.TickLinesPanel"/> class, and set required properties.
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Gauges.TickLinesPanel.#ctor">
            <summary>
            Initializes a new instance of the <see
            cref="T:Syncfusion.UI.Xaml.Gauges.TickLinesPanel"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Gauges.TickLinesPanel.Dispose">
            <summary>
            Method to release allocated resources of TickLinesPanel.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Gauges.TickLinesPanel.SweepDirection">
            <summary>
            Gets or sets SweepDirection of the TickLinesPanel which decides the rendering direction of the ticks.
            </summary>
            <value>
            SweepDirection
            </value>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Gauges.TickLinesPanel.SweepAngle">
            <summary>
            Gets or sets the SweepAngle of the TickLinesPanel which help to position the ticks.
            </summary>
            <value>
            double
            </value>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Gauges.TickLinesPanel.StartAngle">
            <summary>
            Gets or sets the StartAngle of the TickLinesPanel which help to position the ticks.
            </summary>
            <value>
            double
            </value>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Gauges.TickLinesPanel.MinorTickAngularSpace">
            <summary>
            Gets or sets the MinorTickAngularSpace between two children of the TickLinesPanel.
            </summary>
            <value>
            double
            </value>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Gauges.TickLinesPanel.MajorTickAngularSpace">
            <summary>
            Gets or sets the MajorTickAngularSpace between two children of the TickLinesPanel.
            </summary>
            <value>
            double
            </value>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Gauges.TickLinesPanel.IsLogarithmic">
            <summary>
            Gets or sets a value indicating whether the label values should be logarithm
            </summary>
            <value>
            bool
            </value>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Gauges.TickLinesPanel.LogBase">
            <summary>
            Gets or sets the base of the log.
            </summary>
            <value>
            int
            </value>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Gauges.TickLinesPanel.HalfLength">
            <summary>
            Gets HalfLength of the TickLinesPanel used to position the Ticks.
            </summary>
            <remarks>
            HalfLength is a read only property used to get the value of the HalfLength.
            </remarks>
            <value>
            double
            </value>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Gauges.TickLinesPanel.Length">
            <summary>
            Gets or sets value that decides the length of the ticks in TickLinesPanel.
            </summary>
            <value>
            double
            </value>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Gauges.TickLinesPanel.Stroke">
            <summary>
            Gets or sets the Stroke of the TickLinesPanel which help to change the color of ticks.
            </summary>
            <value>
            Brush
            </value>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Gauges.TickLinesPanel.TickStrokeThickness">
            <summary>
            Gets or sets the thickness of ticks in the TickLinesPanel.
            </summary>
            <value>
            double
            </value>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Gauges.TickLinesPanel.Ticks">
            <summary>
            Gets or sets the collection of ticks to the TickLinesPanel.
            </summary>
            <value>
            CircularScaleTickCollection
            </value>
        </member>
        <member name="T:Syncfusion.UI.Xaml.Gauges.TickSetting">
            <summary>
            Represents the major and minor ticks settings commonly. To customize the ticks, set required properties.
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Gauges.TickSetting.OnTicksPropertiesChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            To update the tick properties.
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Gauges.TickSetting.OnOffsetPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            To update the offset values.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Gauges.TickSetting.Length">
            <summary>
            Gets or sets the length of the tick. It is used to customize the ticks length. This is a bindable property.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Gauges.TickSetting.Offset">
            <summary>
            Gets or sets the tick offset value. It is used to customize tick position based on the offset value. This is a bindable property.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Gauges.TickSetting.StartOffset">
            <summary>
            Gets or sets the start offset position of the ticks. Its range is from 0 to 1.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Gauges.TickSetting.EndOffset">
            <summary>
            Gets or sets the end offset position of the ticks. Its range is from 0 to 1. 
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Gauges.TickSetting.Stroke">
            <summary>
            Gets or sets the brush that describes the Stroke of the Tick.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Gauges.TickSetting.StrokeThickness">
            <summary>
            Gets or sets the thickness of the tick.
            </summary>
        </member>
        <member name="T:Syncfusion.UI.Xaml.Gauges.MinorTickSetting">
            <summary>
            Represents the minor ticks settings. To customize the minor ticks, set required properties.
            </summary>
        </member>
        <member name="T:Syncfusion.UI.Xaml.Gauges.MajorTickSetting">
            <summary>
            Represents the minor ticks settings. To customize the major ticks, set required properties.
            </summary>
        </member>
        <member name="T:Syncfusion.UI.Xaml.Gauges.DictionaryLoader">
            <summary>
            It is a static class which  contains the list of brushes for each characters for
            all the four type of character segments
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Gauges.DictionaryLoader.#ctor">
            <summary>
            Initializes a new instance of the <see
            cref="T:Syncfusion.UI.Xaml.Gauges.DictionaryLoader"/> class.
            </summary>
        </member>
        <member name="T:Syncfusion.UI.Xaml.Gauges.DigitalCharacter">
            <summary>
             It is a control, which represents the character in the digital segments.
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Gauges.DigitalCharacter.#ctor">
             <summary>
             Initializes a new instance of the <see
            cref="T:Syncfusion.UI.Xaml.Gauges.DigitalCharacter"/> class.
             </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Gauges.DigitalCharacter.ValueProperty">
            <summary>
            Identifies the <see cref="P:Syncfusion.UI.Xaml.Gauges.DigitalCharacter.Value"/> dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Gauges.DigitalCharacter.CharacterTypeProperty">
            <summary>
            Identifies the <see cref="P:Syncfusion.UI.Xaml.Gauges.DigitalCharacter.CharacterType"/> dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Gauges.DigitalCharacter.SegmentThicknessProperty">
            <summary>
            Identifies the <see cref="P:Syncfusion.UI.Xaml.Gauges.DigitalCharacter.SegmentThickness"/> dependency property.
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Gauges.DigitalCharacter.Dispose">
            <summary>
            Method to release allocated resources of DigitalCharacter.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Gauges.DigitalCharacter.Value">
            <summary>
            Gets or sets the value that digital gauge should display.
            This is a dependency property.
            </summary>
            <value>
            Type: <see cref="T:System.Object"/>
            </value>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Gauges.DigitalCharacter.CharacterType">
            <summary>
            Gets or sets the value indicating whether character should 
            contain seven or fourteen segments. This is a dependency property.
            </summary>
            <value>
            Type: <see cref="P:Syncfusion.UI.Xaml.Gauges.DigitalCharacter.CharacterType"/>
            Default value is CharacterType.SegmentSeven.
            </value>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Gauges.DigitalCharacter.SegmentThickness">
            <summary>
            Gets or sets the width of the segments.
            This is a dependency property.
            </summary>
            <value>
            Type: <see cref="T:System.Double"/>
            Default value is 2.
            </value>
        </member>
        <member name="T:Syncfusion.UI.Xaml.Gauges.DigitalCharactersPanel">
            <summary>
            The digital characters are arranged in this panel. To arrange the panel, create an instance of <see cref="T:Syncfusion.UI.Xaml.Gauges.DigitalCharactersPanel"/> and set required properties.
            </summary>
            <remarks>
            It also supports right-to-left format.
            </remarks>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Gauges.DigitalCharactersPanel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.UI.Xaml.Gauges.DigitalCharactersPanel"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Gauges.DigitalCharactersPanel.Dispose">
            <summary>
            Method to release allocated resources of DigitalCharactersPanel.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Gauges.DigitalCharactersPanel.EnableRTLFormat">
            <summary>
            Gets or sets a value indicating whether the control should enable Right To Left
            support or not. This is a dependency Property.
            </summary>
            <remarks>
            Default value for EnableRTLFormat is False
            </remarks>
            <value>
            <see langword="true" /> if ; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Gauges.DigitalCharactersPanel.Values">
            <summary>
            Gets or sets the value that digital gauge should display. This is a dependency
            property.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Gauges.DigitalCharactersPanel.CharacterHeight">
            <summary>
            Gets or sets the height of the characters. This is a dependency property.
            </summary>
            <remarks>
            The Value Should be in Positive.
            </remarks>
            <value>
            Type: <see cref="T:System.Double"/> Default value is 30.
            </value>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Gauges.DigitalCharactersPanel.CharacterWidth">
            <summary>
            Gets or sets the width of the characters. This is a dependency property.
            </summary>
            <remarks>
            The Value Should be in Positive.
            </remarks>
            <value>
            Type: <see cref="T:System.Double"/> Default value is 30.
            </value>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Gauges.DigitalCharactersPanel.CharacterSpacing">
            <summary>
            Gets or sets the distance between characters. This is a dependency property.
            </summary>
            <remarks>
            The Character Spacing Should be in Positive else it act as RTLFormat
            </remarks>
            <value>
            Type: <see cref="T:System.Double"/> Default value is 10.
            </value>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Gauges.DigitalCharactersPanel.CharacterType">
            <summary>
            Gets or sets the value indicating whether character should contain seven or
            fourteen segments or sixteen segment or in Eight cross Eight Matrix. This is a
            dependency property.
            </summary>
            <value>
            Type: <see cref="P:Syncfusion.UI.Xaml.Gauges.DigitalCharactersPanel.CharacterType"/> Default value is CharacterType.SegmentSeven.
            </value>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Gauges.DigitalCharactersPanel.CharacterStroke">
            <summary>
            Gets or sets the brush used to color the  bright segments.This is a dependency
            property.
            </summary>
            <value>
            Type: <see cref="T:System.Windows.Media.Brush"/> Default value is Red
            </value>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Gauges.DigitalCharactersPanel.DimmedBrush">
            <summary>
            Gets or sets the brush used to color the  dimmed segments.This is a dependency
            property.
            </summary>
            <value>
            Type: <see cref="T:System.Windows.Media.Brush"/>  Default value is Transparent
            </value>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Gauges.DigitalCharactersPanel.DimmedBrushOpacity">
            <summary>
            Gets or sets the opacity for the dimmed segments. This is a dependency
             property.
            </summary>
            <remarks>
            The property gets and sets the percentage of opacity to be set in the dimmed
            segments.
            </remarks>
            <value>
            Type : <see cref="T:System.Double"/> Default value is 50
            </value>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Gauges.DigitalCharactersPanel.SegmentThickness">
            <summary>
            Gets or sets the thickness of character segments. This is a dependency property.
            </summary>
            <remarks>
            It does not supports for Eight Cross Eight Segment. If the Segment thickness is
            negative then it will set the value as 2, if 0 the character is not visible. It
            also depends on CharacterHeight and CharacterWidth Properties.
            </remarks>
            <value>
            Type: <see cref="T:System.Double"/> Default value is 2.
            </value>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Gauges.DigitalCharactersPanel.SkewAngleX">
            <summary>
            Gets or sets the angle to skew the characters along the x-axis. This is a
            dependency property.
            </summary>
            <value>
            Type: <see cref="T:System.Double"/> Default value is 0.
            </value>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Gauges.DigitalCharactersPanel.SkewAngleY">
            <summary>
            Gets or sets the angle to skew the characters along the y-axis. This is a
            dependency property.
            </summary>
            <value>
            Type: <see cref="T:System.Double"/> Default value is 0.
            </value>
        </member>
        <member name="T:Syncfusion.UI.Xaml.Gauges.SfDigitalGauge">
            <summary>
             Represents the control which helps the user to visualize the data in digital
            character
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Gauges.SfDigitalGauge.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.UI.Xaml.Gauges.SfDigitalGauge"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Gauges.SfDigitalGauge.OnEnableRTLFormatChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Calls OnEnableRTLFormatChanged method of the instance, notifies of the dependency property EnableRTLFormat changes.
            </summary>
            <param name="d">Dependency object, the change occurs on.</param>
            <param name="e">Property change details, such as old value and new value.</param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Gauges.SfDigitalGauge.OnEnableRTLFormatChanged(System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Calls OnEnableRTLFormatChanged method of the instance, notifies of the dependency property EnableRTLFormat changes.
            </summary>
            <param name="e">Property change details, such as old value and new value.</param>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Gauges.SfDigitalGauge.ValueProperty">
            <summary>
            Identifies the <see cref="P:Syncfusion.UI.Xaml.Gauges.SfDigitalGauge.Value"/> dependency property.
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Gauges.SfDigitalGauge.OnValueChanged(System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Updates property value cache and raises ValueChanged event.
            </summary>
            <param name="e">
            Property change details, such as old value and new value.</param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Gauges.SfDigitalGauge.OnValueChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Calls OnValueChanged method of the instance, notifies of the dependency property value changes.
            </summary>
            <param name="d">Dependency object, the change occurs on.</param>
            <param name="e">Property change details, such as old value and new value.</param>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Gauges.SfDigitalGauge.CharacterHeightProperty">
            <summary>
            Identifies the <see cref="P:Syncfusion.UI.Xaml.Gauges.SfDigitalGauge.CharacterHeight"/> dependency property.
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Gauges.SfDigitalGauge.OnCharacterHeightChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Calls OnCharacterHeightChanged method of the instance, notifies of the dependency property value changes.
            </summary>
            <param name="d">Dependency object, the change occures on.</param>
            <param name="e">Property change details, such as old value and new value.</param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Gauges.SfDigitalGauge.OnCharacterHeightChanged(System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Updates property value cache and raises CharacterHeightChanged event.
            </summary>
            <param name="e">
            Property change details, such as old value and new value.</param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Gauges.SfDigitalGauge.OnCharacterWidthChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Calls OnCharacterWidthChanged method of the instance, notifies of the dependency property value changes.
            </summary>
            <param name="d">Dependency object, the change occures on.</param>
            <param name="e">Property change details, such as old value and new value.</param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Gauges.SfDigitalGauge.OnCharacterWidthChanged(System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Updates property value cache and raises CharacterWidthChanged event.
            </summary>
            <param name="e">
            Property change details, such as old value and new value.</param>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Gauges.SfDigitalGauge.CharactersSpacingProperty">
            <summary>
            Identifies the <see cref="P:Syncfusion.UI.Xaml.Gauges.SfDigitalGauge.CharactersSpacing"/> dependency property.
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Gauges.SfDigitalGauge.OnCharactersSpacingChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Calls OnCharacterSpacingChanged method of the instance, notifies of the dependency property value changes.
            </summary>
            <param name="d">Dependency object, the change occures on.</param>
            <param name="e">Property change details, such as old value and new value.</param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Gauges.SfDigitalGauge.OnCharactersSpacingChanged(System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Updates property value cache and raises CharacterSpacingChanged event.
            </summary>
            <param name="e">
            Property change details, such as old value and new value.</param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Gauges.SfDigitalGauge.OnCharacterStrokeChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Updates property value cache and raises CharacterStrokeChanged event.
            </summary>
            <param name="d">Dependency object, the change occures on.</param>
            <param name="e">Property change details, such as old value and new value.</param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Gauges.SfDigitalGauge.OnCharacterStrokeChanged(System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Updates property value cache and raises CharacterStrokeChanged event.
            </summary>
            <param name="e">
            Property change details, such as old value and new value.</param>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Gauges.SfDigitalGauge.DimmedBrushProperty">
            <summary>
            Identifies the <see cref="P:Syncfusion.UI.Xaml.Gauges.SfDigitalGauge.DimmedBrush"/> dependency property.
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Gauges.SfDigitalGauge.OnDimmedBrushChanged(System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Updates property value cache and raises DimmedBrushChanged event.
            </summary>
            <param name="e">
            Property change details, such as old value and new value.</param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Gauges.SfDigitalGauge.OnDimmedBrushChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Calls OnDimmedBrushChanged method of the instance, notifies of the dependency property value changes.
            </summary>
            <param name="d">Dependency object, the change occures on.</param>
            <param name="e">Property change details, such as old value and new value.</param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Gauges.SfDigitalGauge.OnDimmedBrushOpacityChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Updates property value cache and raises DimmedBrushOpacityChanged event.
            </summary>
            <param name="d">Dependency object, the change occures on.</param>
            <param name="e">Property change details, such as old value and new value.</param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Gauges.SfDigitalGauge.OnDimmedBrushOpacityChanged(System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Updates property value cache and raises DimmedBrushOpacityChanged event.
            </summary>
            <param name="e">
            Property change details, such as old value and new value.</param>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Gauges.SfDigitalGauge.SegmentThicknessProperty">
            <summary>
            Identifies the <see cref="P:Syncfusion.UI.Xaml.Gauges.SfDigitalGauge.SegmentThickness"/> dependency property.
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Gauges.SfDigitalGauge.OnSegmentThicknessChanged(System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Updates property value cache and raises SegmentThicknessChanged event.
            </summary>
            <param name="e">
            Property change details, such as old value and new value.</param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Gauges.SfDigitalGauge.OnSegmentThicknessChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Calls OnSegmentThicknessChanged method of the instance, notifies of the dependency property value changes.
            </summary>
            <param name="d">Dependency object, the change occures on.</param>
            <param name="e">Property change details, such as old value and new value.</param>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Gauges.SfDigitalGauge.SkewAngleXProperty">
            <summary>
            Identifies the <see cref="P:Syncfusion.UI.Xaml.Gauges.SfDigitalGauge.SkewAngleX"/> dependency property.
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Gauges.SfDigitalGauge.OnSkewAngleXChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Calls OnSkewAngleXChanged method of the instance, notifies of the dependency property value changes.
            </summary>
            <param name="d">Dependency object, the change occurs on.</param>
            <param name="e">Property change details, such as old value and new value.</param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Gauges.SfDigitalGauge.OnSkewAngleXChanged(System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Updates property value cache and raises SkewAngleXChanged event.
            </summary>
            <param name="e">
            Property change details, such as old value and new value.</param>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Gauges.SfDigitalGauge.SkewAngleYProperty">
            <summary>
            Identifies the <see cref="P:Syncfusion.UI.Xaml.Gauges.SfDigitalGauge.SkewAngleY"/> dependency property.
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Gauges.SfDigitalGauge.OnSkewAngleYChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Calls OnSkewAngleYChanged method of the instance, notifies of the dependency property value changes.
            </summary>
            <param name="d">Dependency object, the change occurs on.</param>
            <param name="e">Property change details, such as old value and new value.</param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Gauges.SfDigitalGauge.OnSkewAngleYChanged(System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Updates property value cache and raises SkewAngleYChanged event.
            </summary>
            <param name="e">
            Property change details, such as old value and new value.</param>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Gauges.SfDigitalGauge.EnableRTLFormat">
            <summary>
            Gets or sets a value indicating whether the control should enable Right To Left
            support or not. This is a dependency Property.
            </summary>
            <remarks>
            Default value for EnableRTLFormat is False
            </remarks>
            <value>
            <see langword="true" /> if ; otherwise, <see langword="false" />.
            </value>
            <example>
            using Syncfusion.UI.Xaml.Gauges;
            using System;
            using System.Collections.Generic;
            using System.IO;
            using System.Linq;
            using Windows.Foundation;
            using Windows.Foundation.Collections;
            using Windows.UI.Xaml;
            using Windows.UI.Xaml.Controls;
            using Windows.UI.Xaml.Controls.Primitives;
            using Windows.UI.Xaml.Data;
            using Windows.UI.Xaml.Input;
            using Windows.UI.Xaml.Media;
            using Windows.UI.Xaml.Navigation;
            
            
            namespace TestSample
            {
                public sealed partial class MainPage : Page
                {
                    public MainPage()
                    {
                        this.InitializeComponent();
                        digitalGauge.Value = " SYNCFUSION";
                        digitalGauge.EnableRTLFormat = true;
                    }
                }
            }
            </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Gauges.SfDigitalGauge.Value">
            <summary>
            Gets or sets the value that digital gauge should display. This is a dependency
            property.
            </summary>
            <value>
            Type: <see cref="T:System.Object"/>
            </value>
            <example>
            using Syncfusion.UI.Xaml.Gauges;
            using System;
            using System.Collections.Generic;
            using System.IO;
            using System.Linq;
            using Windows.Foundation;
            using Windows.Foundation.Collections;
            using Windows.UI.Xaml;
            using Windows.UI.Xaml.Controls;
            using Windows.UI.Xaml.Controls.Primitives;
            using Windows.UI.Xaml.Data;
            using Windows.UI.Xaml.Input;
            using Windows.UI.Xaml.Media;
            using Windows.UI.Xaml.Navigation;
            
            
            namespace TestSample
            {
                public sealed partial class MainPage : Page
                {
                    public MainPage()
                    {
                        this.InitializeComponent();
                        digitalGauge.Value = " SYNCFUSION";
                    }
                }
            }
            
            </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Gauges.SfDigitalGauge.CharacterType">
            <summary>
            Gets or sets the value indicating whether character should contain seven or
            fourteen segments or sixteen segment or in Eight cross Eight Matrix. This is a
            dependency property.
            </summary>
            <value>
            Type: <see cref="P:Syncfusion.UI.Xaml.Gauges.SfDigitalGauge.CharacterType"/> Default value is CharacterType.SegmentSeven.
            </value>
            <example>
            using Syncfusion.UI.Xaml.Gauges;
            using System;
            using System.Collections.Generic;
            using System.IO;
            using System.Linq;
            using Windows.Foundation;
            using Windows.Foundation.Collections;
            using Windows.UI.Xaml;
            using Windows.UI.Xaml.Controls;
            using Windows.UI.Xaml.Controls.Primitives;
            using Windows.UI.Xaml.Data;
            using Windows.UI.Xaml.Input;
            using Windows.UI.Xaml.Media;
            using Windows.UI.Xaml.Navigation;
            
            
            
            namespace TestSample
            {
                public sealed partial class MainPage : Page
                {
                    public MainPage()
                    {
                        this.InitializeComponent();
                        digitalGauge.Value = " SYNCFUSION";
                        digitalGauge.CharacterType = CharacterType.EightCrossEightDotMatrix;
                    }
                }
            }
            
            </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Gauges.SfDigitalGauge.CharacterHeight">
            <summary>
            Gets or sets the height of the characters. This is a dependency property.
            </summary>
            <remarks>
            The Value Should be in Positive.
            </remarks>
            <value>
            Type: <see cref="T:System.Double"/> Default value is 30.
            </value>
            <example>
            using Syncfusion.UI.Xaml.Gauges;
            using System;
            using System.Collections.Generic;
            using System.IO;
            using System.Linq;
            using Windows.Foundation;
            using Windows.Foundation.Collections;
            using Windows.UI.Xaml;
            using Windows.UI.Xaml.Controls;
            using Windows.UI.Xaml.Controls.Primitives;
            using Windows.UI.Xaml.Data;
            using Windows.UI.Xaml.Input;
            using Windows.UI.Xaml.Media;
            using Windows.UI.Xaml.Navigation;
            
            
            
            namespace TestSample
            {
                public sealed partial class MainPage : Page
                {
                    public MainPage()
                    {
                        this.InitializeComponent();
                        digitalGauge.Value = " SYNCFUSION";
                        digitalGauge.CharacterHeight = 75;   
                    }
                }
            }
            
            </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Gauges.SfDigitalGauge.CharacterWidth">
            <summary>
            Gets or sets the width of the characters. This is a dependency property.
            </summary>
            <remarks>
            The Value Should be in Positive.
            </remarks>
            <value>
            Type: <see cref="T:System.Double"/> Default value is 30.
            </value>
            <example>
            using Syncfusion.UI.Xaml.Gauges;
            using System;
            using System.Collections.Generic;
            using System.IO;
            using System.Linq;
            using Windows.Foundation;
            using Windows.Foundation.Collections;
            using Windows.UI.Xaml;
            using Windows.UI.Xaml.Controls;
            using Windows.UI.Xaml.Controls.Primitives;
            using Windows.UI.Xaml.Data;
            using Windows.UI.Xaml.Input;
            using Windows.UI.Xaml.Media;
            using Windows.UI.Xaml.Navigation;
            
            
            
            namespace TestSample
            {
                public sealed partial class MainPage : Page
                {
                    public MainPage()
                    {
                        this.InitializeComponent();
                        digitalGauge.Value = " SYNCFUSION";
                        digitalGauge.CharacterWidth = 75;   
                    }
                }
            }
            </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Gauges.SfDigitalGauge.CharactersSpacing">
            <summary>
            Gets or sets the distance between characters. This is a dependency property.
            </summary>
            <remarks>
            The Character Spacing Should be in Positive else it act as RTLFormat
            </remarks>
            <value>
            Type: <see cref="T:System.Double"/> Default value is 10.
            </value>
            <example>
            using Syncfusion.UI.Xaml.Gauges;
            using System;
            using System.Collections.Generic;
            using System.IO;
            using System.Linq;
            using Windows.Foundation;
            using Windows.Foundation.Collections;
            using Windows.UI.Xaml;
            using Windows.UI.Xaml.Controls;
            using Windows.UI.Xaml.Controls.Primitives;
            using Windows.UI.Xaml.Data;
            using Windows.UI.Xaml.Input;
            using Windows.UI.Xaml.Media;
            using Windows.UI.Xaml.Navigation;
            
            
            
            namespace TestSample
            {
                public sealed partial class MainPage : Page
                {
                    public MainPage()
                    {
                        this.InitializeComponent();
                        digitalGauge.Value = " SYNCFUSION";
                        digitalGauge.CharactersSpacing = 50;  
                    }
                }
            }
            
            </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Gauges.SfDigitalGauge.CharacterStroke">
            <summary>
            Gets or sets the brush used to color the  bright segments.This is a dependency
            property.
            </summary>
            <value>
            Type: <see cref="T:System.Windows.Media.Brush"/> Default value is Red
            </value>
            <example>
            using Syncfusion.UI.Xaml.Gauges;
            using System;
            using System.Collections.Generic;
            using System.IO;
            using System.Linq;
            using Windows.Foundation;
            using Windows.Foundation.Collections;
            using Windows.UI;
            using Windows.UI.Xaml;
            using Windows.UI.Xaml.Controls;
            using Windows.UI.Xaml.Controls.Primitives;
            using Windows.UI.Xaml.Data;
            using Windows.UI.Xaml.Input;
            using Windows.UI.Xaml.Media;
            using Windows.UI.Xaml.Navigation;
            
            
            
            namespace TestSample
            {
                public sealed partial class MainPage : Page
                {
                    public MainPage()
                    {
                        this.InitializeComponent();
                        digitalGauge.Value = " SYNCFUSION";
                        digitalGauge.CharacterStroke = new SolidColorBrush(Colors.Yellow);  
                    }
                }
            }
            
            </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Gauges.SfDigitalGauge.DimmedBrush">
            <summary>
            Gets or sets the brush used to color the  dimmed segments.This is a dependency
            property.
            </summary>
            <value>
            Type: <see cref="T:System.Windows.Media.Brush"/>  Default value is Transparent
            </value>
            <example>
            using Syncfusion.UI.Xaml.Gauges;
            using System;
            using System.Collections.Generic;
            using System.IO;
            using System.Linq;
            using Windows.Foundation;
            using Windows.Foundation.Collections;
            using Windows.UI;
            using Windows.UI.Xaml;
            using Windows.UI.Xaml.Controls;
            using Windows.UI.Xaml.Controls.Primitives;
            using Windows.UI.Xaml.Data;
            using Windows.UI.Xaml.Input;
            using Windows.UI.Xaml.Media;
            using Windows.UI.Xaml.Navigation;
            
            
            
            namespace TestSample
            {
                public sealed partial class MainPage : Page
                {
                    public MainPage()
                    {
                         this.InitializeComponent();
                         digitalGauge.Value = " SYNCFUSION";
                         digitalGauge.DimmedBrush = new SolidColorBrush(Colors.White);  
                    }
                }
            }
            
            </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Gauges.SfDigitalGauge.DimmedBrushOpacity">
            <summary>
            Gets or sets the opacity for the dimmed segments. This is a dependency
             property.
            </summary>
            <remarks>
            The property gets and sets the percentage of opacity to be set in the dimmed
            segments.
            </remarks>
            <value>
            Type : <see cref="T:System.Double"/> Default value is 50
            </value>
            <example>
            using Syncfusion.UI.Xaml.Gauges;
            using System;
            using System.Collections.Generic;
            using System.IO;
            using System.Linq;
            using Windows.Foundation;
            using Windows.Foundation.Collections;
            using Windows.UI;
            using Windows.UI.Xaml;
            using Windows.UI.Xaml.Controls;
            using Windows.UI.Xaml.Controls.Primitives;
            using Windows.UI.Xaml.Data;
            using Windows.UI.Xaml.Input;
            using Windows.UI.Xaml.Media;
            using Windows.UI.Xaml.Navigation;
            
            
            
            namespace TestSample
            {
                public sealed partial class MainPage : Page
                {
                    public MainPage()
                    {
                         this.InitializeComponent();
                         digitalGauge.Value = " SYNCFUSION";
                         digitalGauge.DimmedBrush = new SolidColorBrush(Colors.White);
                         digitalGauge.DimmedBrushOpacity = 20;  
                    }
                }
            }
            
            </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Gauges.SfDigitalGauge.SegmentThickness">
            <summary>
            Gets or sets the thickness of character segments. This is a dependency property.
            </summary>
            <remarks>
            It does not supports for Eight Cross Eight Segment. If the Segment thickness is
            negative then it will set the value as 2, if 0 the character is not visible. It
            also depends on CharacterHeight and CharacterWidth Properties.
            </remarks>
            <value>
            Type: <see cref="T:System.Double"/> Default value is 2.
            </value>
            <example>
            using Syncfusion.UI.Xaml.Gauges;
            using System;
            using System.Collections.Generic;
            using System.IO;
            using System.Linq;
            using Windows.Foundation;
            using Windows.Foundation.Collections;
            using Windows.UI;
            using Windows.UI.Xaml;
            using Windows.UI.Xaml.Controls;
            using Windows.UI.Xaml.Controls.Primitives;
            using Windows.UI.Xaml.Data;
            using Windows.UI.Xaml.Input;
            using Windows.UI.Xaml.Media;
            using Windows.UI.Xaml.Navigation;
            
            
            
            namespace TestSample
            {
                public sealed partial class MainPage : Page
                {
                    public MainPage()
                    {
                         this.InitializeComponent();
                         digitalGauge.Value = " SYNCFUSION";
                         digitalGauge.SegmentThickness = 3;  
                    }
                }
            }
            </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Gauges.SfDigitalGauge.SkewAngleX">
            <summary>
            Gets or sets the angle to skew the characters along the x-axis. This is a
            dependency property.
            </summary>
            <value>
            Type: <see cref="T:System.Double"/> Default value is 0.
            </value>
            <example>
            using Syncfusion.UI.Xaml.Gauges;
            using System;
            using System.Collections.Generic;
            using System.IO;
            using System.Linq;
            using Windows.Foundation;
            using Windows.Foundation.Collections;
            using Windows.UI;
            using Windows.UI.Xaml;
            using Windows.UI.Xaml.Controls;
            using Windows.UI.Xaml.Controls.Primitives;
            using Windows.UI.Xaml.Data;
            using Windows.UI.Xaml.Input;
            using Windows.UI.Xaml.Media;
            using Windows.UI.Xaml.Navigation;
            
            
            
            namespace TestSample
            {
                public sealed partial class MainPage : Page
                {
                    public MainPage()
                    {
                         this.InitializeComponent();
                         digitalGauge.Value = " SYNCFUSION";
                         digitalGauge.SkewAngleX = 20;  
                    }
                }
            }
            
            </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Gauges.SfDigitalGauge.SkewAngleY">
            <summary>
            Gets or sets the angle to skew the characters along the y-axis. This is a
            dependency property.
            </summary>
            <value>
            Type: <see cref="T:System.Double"/> Default value is 0.
            </value>
            <example>
            using Syncfusion.UI.Xaml.Gauges;
            using System;
            using System.Collections.Generic;
            using System.IO;
            using System.Linq;
            using Windows.Foundation;
            using Windows.Foundation.Collections;
            using Windows.UI;
            using Windows.UI.Xaml;
            using Windows.UI.Xaml.Controls;
            using Windows.UI.Xaml.Controls.Primitives;
            using Windows.UI.Xaml.Data;
            using Windows.UI.Xaml.Input;
            using Windows.UI.Xaml.Media;
            using Windows.UI.Xaml.Navigation;
            
            
            
            namespace TestSample
            {
                public sealed partial class MainPage : Page
                {
                    public MainPage()
                    {
                         this.InitializeComponent();
                         digitalGauge.Value = " SYNCFUSION";
                         digitalGauge.SkewAngleY = 25;  
                    }
                }
            }
            
            </example>
        </member>
        <member name="E:Syncfusion.UI.Xaml.Gauges.SfDigitalGauge.EnableRTLFormatChanged">
            <summary>
            Event that is raised when <see cref="P:Syncfusion.UI.Xaml.Gauges.SfDigitalGauge.EnableRTLFormat"/> property is changed.
            </summary>
        </member>
        <member name="E:Syncfusion.UI.Xaml.Gauges.SfDigitalGauge.ValueChanged">
            <summary>
            Event that is raised when <see cref="P:Syncfusion.UI.Xaml.Gauges.SfDigitalGauge.Value"/> property is changed.
            </summary>
        </member>
        <member name="E:Syncfusion.UI.Xaml.Gauges.SfDigitalGauge.CharacterTypeChanged">
            <summary>
            Event that is raised when <see cref="P:Syncfusion.UI.Xaml.Gauges.SfDigitalGauge.CharacterType"/> property is changed.
            </summary>
        </member>
        <member name="E:Syncfusion.UI.Xaml.Gauges.SfDigitalGauge.CharacterHeightChanged">
            <summary>
            Event that is raised when <see cref="P:Syncfusion.UI.Xaml.Gauges.SfDigitalGauge.CharacterHeight"/> property is changed.
            </summary>
        </member>
        <member name="E:Syncfusion.UI.Xaml.Gauges.SfDigitalGauge.CharacterWidthChanged">
            <summary>
            Event that is raised when <see cref="P:Syncfusion.UI.Xaml.Gauges.SfDigitalGauge.CharacterWidth"/> property is changed.
            </summary>
        </member>
        <member name="E:Syncfusion.UI.Xaml.Gauges.SfDigitalGauge.CharactersSpacingChanged">
            <summary>
            Event that is raised when <see cref="P:Syncfusion.UI.Xaml.Gauges.SfDigitalGauge.CharactersSpacing"/> property is changed.
            </summary>
        </member>
        <member name="E:Syncfusion.UI.Xaml.Gauges.SfDigitalGauge.CharacterStrokeChanged">
            <summary>
            Event that is raised when <see cref="P:Syncfusion.UI.Xaml.Gauges.SfDigitalGauge.CharacterStroke"/> property is changed.
            </summary>
        </member>
        <member name="E:Syncfusion.UI.Xaml.Gauges.SfDigitalGauge.DimmedBrushChanged">
            <summary>
            Event that is raised when <see cref="P:Syncfusion.UI.Xaml.Gauges.SfDigitalGauge.DimmedBrush"/> property is changed.
            </summary>
        </member>
        <member name="E:Syncfusion.UI.Xaml.Gauges.SfDigitalGauge.DimmedBrushOpacityChanged">
            <summary>
            Event that is raised when <see cref="P:Syncfusion.UI.Xaml.Gauges.SfDigitalGauge.DimmedBrushOpacity"/> property is changed.
            </summary>
        </member>
        <member name="E:Syncfusion.UI.Xaml.Gauges.SfDigitalGauge.SegmentThicknessChanged">
            <summary>
            Event that is raised when <see cref="P:Syncfusion.UI.Xaml.Gauges.SfDigitalGauge.SegmentThickness"/> property is changed.
            </summary>
        </member>
        <member name="E:Syncfusion.UI.Xaml.Gauges.SfDigitalGauge.SkewAngleXChanged">
            <summary>
            Event that is raised when <see cref="P:Syncfusion.UI.Xaml.Gauges.SfDigitalGauge.SkewAngleX"/> property is changed.
            </summary>
        </member>
        <member name="E:Syncfusion.UI.Xaml.Gauges.SfDigitalGauge.SkewAngleYChanged">
            <summary>
            Event that is raised when <see cref="P:Syncfusion.UI.Xaml.Gauges.SfDigitalGauge.SkewAngleY"/> property is changed.
            </summary>
        </member>
        <member name="T:Syncfusion.UI.Xaml.Gauges.CharacterType">
            <summary>
            Enumerates the values for character type in the digital gauge. You can set different type of CharacterType.
            </summary>
        </member>
        <member name="T:Syncfusion.UI.Xaml.Gauges.SfLinearGauge">
            <summary>
            Represents the linear gauge. To render this gauge, create an instance of the <see cref="T:Syncfusion.UI.Xaml.Gauges.SfLinearGauge"/> class, and set required properties.
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Gauges.SfLinearGauge.#ctor">
            <summary>
            Initializes a new instance of the <see
            cref="T:Syncfusion.UI.Xaml.Gauges.SfLinearGauge"/> class.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Gauges.SfLinearGauge.OrientationProperty">
            <summary>
            Using a DependencyProperty as the backing store for Orientation.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Gauges.SfLinearGauge.Orientation">
            <summary>
            Gets or sets the orientation of the linear gauge.
            </summary>
            <example>
            using Syncfusion.UI.Xaml.Gauges;
            namespace GaugeSample
            {
                public sealed partial class LinearGauge
                {
                    public LinearGauge()
                    {
                        InitializeComponent();
                        SfLinearGauge linearGauge = new SfLinearGauge();
                        linearGauge.MainScale = new LinearScale();
                        this.Layout.Children.Add(linearGauge);
                    }
                }   
            }
            </example>
        </member>
        <member name="T:Syncfusion.UI.Xaml.Gauges.LinearScaleDirection">
            <summary>
            Enumerates the direction of linear scale in the linear gauge.
            </summary>
        </member>
        <member name="T:Syncfusion.UI.Xaml.Gauges.LinearPointerType">
            <summary>
            Enumerates the type of linear pointers available in the linear gauge. You can use different types of linear poiners in the linear gauge.
            </summary>
        </member>
        <member name="T:Syncfusion.UI.Xaml.Gauges.LinearSymbolPointerStyle">
            <summary>
            Enumerates the style of symbol pointer in the linear gauge.
            </summary>
        </member>
        <member name="T:Syncfusion.UI.Xaml.Gauges.LinearTicksPosition">
            <summary>
            Enumerates the position of ticks in the linear gauge.
            </summary>
        </member>
        <member name="T:Syncfusion.UI.Xaml.Gauges.LinearSymbolPointersPosition">
            <summary>
            Enumerates the position of symbol pointers in the linear gauge.
            </summary>
        </member>
        <member name="T:Syncfusion.UI.Xaml.Gauges.LinearRangesPosition">
            <summary>
            Enumerates the values for position of ranges in the linear gauge.
            </summary>
        </member>
        <member name="T:Syncfusion.UI.Xaml.Gauges.LinearLabelsPosition">
            <summary>
            Enumerates the values for position of labels in the linear gauge. You can change the position of labels in the linear gauge.
            </summary>
        </member>
        <member name="T:Syncfusion.UI.Xaml.Gauges.LinearScalePositionModes">
            <summary>
            Enumerates the values for position of elements in the linear gauge.
            </summary>
        </member>
        <member name="T:Syncfusion.UI.Xaml.Gauges.LinearGaugeUniformPanel">
            <summary>
            Represents the panel for arranging the labels and ticks in the linear scale. To arrange the ticks and labels, create an instance of the LinearGaugeUniformPanel class.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Gauges.LinearGaugeUniformPanel.OrientationProperty">
            <summary>
            Using a DependencyProperty as the backing store for Orientation.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Gauges.LinearGaugeUniformPanel.Orientation">
            <summary>
            Gets or sets the orientation for arranging elements in the panel.
            </summary>
        </member>
        <member name="T:Syncfusion.UI.Xaml.Gauges.LinearPointer">
            <summary>
            Represents the linear pointer. To render this pointer, create an instance of the LinearPointer class, and set required properties.
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Gauges.LinearPointer.#ctor">
            <summary>
            Initializes a new instance of the <see
            cref="T:Syncfusion.UI.Xaml.Gauges.LinearPointer"/> class.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Gauges.LinearPointer.ValueProperty">
            <summary>
            Using a DependencyProperty as the backing store for Value.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Gauges.LinearPointer.BarPointerStartProperty">
            <summary>
            The dependency property for <see cref="P:Syncfusion.UI.Xaml.Gauges.LinearPointer.BarPointerStart"/> property.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Gauges.LinearPointer.EnableAnimationProperty">
            <summary>
            Using a DependencyProperty as the backing store for EnableAnimation.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Gauges.LinearPointer.PointerTypeProperty">
            <summary>
            Using a DependencyProperty as the backing store for PointerType.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Gauges.LinearPointer.PointerPositionFactorProperty">
            <summary>
            Using a DependencyProperty as the backing store for PointerPositionFactor.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Gauges.LinearPointer.ShowPointerProperty">
            <summary>
            Using a DependencyProperty as the backing store for ShowPointer.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Gauges.LinearPointer.BarPointerStrokeThicknessProperty">
            <summary>
            Using a DependencyProperty as the backing store for BarPointerStrokeThickness.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Gauges.LinearPointer.BarPointerStrokeProperty">
            <summary>
            Using a DependencyProperty as the backing store for BarPointerStroke.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Gauges.LinearPointer.SymbolPointerHeightProperty">
            <summary>
            Using a DependencyProperty as the backing store for SymbolPointerHeight.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Gauges.LinearPointer.SymbolPointerWidthProperty">
            <summary>
            Using a DependencyProperty as the backing store for SymbolPointerWidth.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Gauges.LinearPointer.SymbolPointerStrokeProperty">
            <summary>
            Using a DependencyProperty as the backing store for SymbolPointerStroke.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Gauges.LinearPointer.SymbolPointerStyleProperty">
            <summary>
            Using a DependencyProperty as the backing store for SymbolPointerStyle.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Gauges.LinearPointer.SymbolPointerTemplateProperty">
            <summary>
            Using a DependencyProperty as the backing store for SymbolPointerTemplate.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Gauges.LinearPointer.SymbolPointerPositionProperty">
            <summary>
            Using a DependencyProperty as the backing store for SymbolPointerPosition.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Gauges.LinearPointer.Value">
            <summary>
            Gets or sets the value for pointer in the linear gauge.
            </summary>
            <example>
            using Syncfusion.UI.Xaml.Gauges;
            namespace GaugeSample
            {
                public sealed partial class LinearGauge
                {
                    public LinearGauge()
                    {
                        InitializeComponent();
                        SfLinearGauge linearGauge = new SfLinearGauge();
                        LinearPointer linearPointer = new LinearPointer();
                        linearPointer.Value = 25;
                        linearGauge.MainScale = new LinearScale();
                        linearGauge.MainScale.Pointers.Add(linearPointer);
                        this.Layout.Children.Add(linearGauge);
                    }
                }   
            }
            </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Gauges.LinearPointer.BarPointerStart">
            <summary>
            Gets or sets the start value for the bar pointer.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Gauges.LinearPointer.EnableAnimation">
            <summary>
            Gets or sets a value indicating whether the animation for pointers in
            linear scale should be enabled or not.
            </summary>
            <example>
            using Syncfusion.UI.Xaml.Gauges;
            namespace GaugeSample
            {
                public sealed partial class LinearGauge
                {
                    public LinearGauge()
                    {
                        InitializeComponent();
                        SfLinearGauge linearGauge = new SfLinearGauge();
                        LinearPointer linearPointer = new LinearPointer();
                        linearPointer.Value = 25;
                        linearPointer.EnableAnimation = true;
                        linearGauge.MainScale = new LinearScale();
                        linearGauge.MainScale.Pointers.Add(linearPointer);
                        this.Layout.Children.Add(linearGauge);
                    }
                }   
            }
            </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Gauges.LinearPointer.PointerType">
            <summary>
            Gets or sets the type of pointer in the linear scale.
            </summary>
            <example>
            using Syncfusion.UI.Xaml.Gauges;
            namespace GaugeSample
            {
                public sealed partial class LinearGauge
                {
                    public LinearGauge()
                    {
                        InitializeComponent();
                        SfLinearGauge linearGauge = new SfLinearGauge();
                        LinearPointer linearPointer = new LinearPointer();
                        linearPointer.Value = 25;
                        linearPointer.PointerType = LinearPointerType.SymbolPointer;
                        linearGauge.MainScale = new LinearScale();
                        linearGauge.MainScale.Pointers.Add(linearPointer);
                        this.Layout.Children.Add(linearGauge);
                    }
                }   
            }
            </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Gauges.LinearPointer.PointerPositionFactor">
            <summary>
            Gets or sets the factor value to position pointers based upon the scale.
            </summary>
            <remarks>
            It shows effect only if ElementsPosition of linear scale is set as Custom.
            </remarks>
            <example>
            using Syncfusion.UI.Xaml.Gauges;
            namespace GaugeSample
            {
                public sealed partial class LinearGauge
                {
                    public LinearGauge()
                    {
                        InitializeComponent();
                        SfLinearGauge linearGauge = new SfLinearGauge();
                        LinearPointer linearPointer = new LinearPointer();
                        linearPointer.Value = 25;
                        linearPointer.PointerPositionFactor = 0.5;
                        linearGauge.MainScale = new LinearScale();
                        linearGauge.MainScale.Pointers.Add(linearPointer);
                        this.Layout.Children.Add(linearGauge);
                    }
                }   
            }
            </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Gauges.LinearPointer.ShowPointer">
            <summary>
            Gets or sets a value indicating whether the pointer should be shown or hidden.
            </summary>
            <example>
            using Syncfusion.UI.Xaml.Gauges;
            namespace GaugeSample
            {
                public sealed partial class LinearGauge
                {
                    public LinearGauge()
                    {
                        InitializeComponent();
                        SfLinearGauge linearGauge = new SfLinearGauge();
                        LinearPointer linearPointer = new LinearPointer();
                        linearPointer.Value = 25;
                        linearPointer.ShowPointer = true;
                        linearGauge.MainScale = new LinearScale();
                        linearGauge.MainScale.Pointers.Add(linearPointer);
                        this.Layout.Children.Add(linearGauge);
                    }
                }   
            }
            </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Gauges.LinearPointer.BarPointerStrokeThickness">
            <summary>
            Gets or sets the thickness of bar pointer.
            </summary>
            <example>
            using Syncfusion.UI.Xaml.Gauges;
            namespace GaugeSample
            {
                public sealed partial class LinearGauge
                {
                    public LinearGauge()
                    {
                        InitializeComponent();
                        SfLinearGauge linearGauge = new SfLinearGauge();
                        LinearPointer linearPointer = new LinearPointer();
                        linearPointer.Value = 25;
                        linearPointer.PointerType = LinearPointerType.BarPointer;
                        linearPointer.BarPointerStrokeThickness = 15;
                        linearGauge.MainScale = new LinearScale();
                        linearGauge.MainScale.Pointers.Add(linearPointer);
                        this.Layout.Children.Add(linearGauge);
                    }
                }   
            }
            </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Gauges.LinearPointer.BarPointerStroke">
            <summary>
            Gets or sets the color of bar pointer.
            </summary>
            <example>
            using Syncfusion.UI.Xaml.Gauges;
            using Windows.UI;
            using Windows.UI.Xaml.Media;
            namespace GaugeSample
            {
                public sealed partial class LinearGauge
                {
                    public LinearGauge()
                    {
                        InitializeComponent();
                        SfLinearGauge linearGauge = new SfLinearGauge();
                        LinearPointer linearPointer = new LinearPointer();
                        linearPointer.Value = 25;
                        linearPointer.PointerType = LinearPointerType.BarPointer;
                        linearPointer.BarPointerStroke = new SolidColorBrush(Colors.Red);
                        linearGauge.MainScale = new LinearScale();
                        linearGauge.MainScale.Pointers.Add(linearPointer);
                        this.Layout.Children.Add(linearGauge);
                    }
                }   
            }
            </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Gauges.LinearPointer.SymbolPointerHeight">
            <summary>
            Gets or sets the height of the symbol pointer.
            </summary>
            <example>
            using Syncfusion.UI.Xaml.Gauges;
            namespace GaugeSample
            {
                public sealed partial class LinearGauge
                {
                    public LinearGauge()
                    {
                        InitializeComponent();
                        SfLinearGauge linearGauge = new SfLinearGauge();
                        LinearPointer linearPointer = new LinearPointer();
                        linearPointer.Value = 25;
                        linearPointer.PointerType = LinearPointerType.SymbolPointer;
                        linearPointer.SymbolPointerHeight = 50;
                        linearGauge.MainScale = new LinearScale();
                        linearGauge.MainScale.Pointers.Add(linearPointer);
                        this.Layout.Children.Add(linearGauge);
                    }
                }   
            }
            </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Gauges.LinearPointer.SymbolPointerWidth">
            <summary>
            Gets or sets the width of the symbol pointer.
            </summary>
            <example>
            using Syncfusion.UI.Xaml.Gauges;
            namespace GaugeSample
            {
                public sealed partial class LinearGauge
                {
                    public LinearGauge()
                    {
                        InitializeComponent();
                        SfLinearGauge linearGauge = new SfLinearGauge();
                        LinearPointer linearPointer = new LinearPointer();
                        linearPointer.Value = 25;
                        linearPointer.PointerType = LinearPointerType.SymbolPointer;
                        linearPointer.SymbolPointerWidth = 30;
                        linearGauge.MainScale = new LinearScale();
                        linearGauge.MainScale.Pointers.Add(linearPointer);
                        this.Layout.Children.Add(linearGauge);
                    }
                }   
            }
            </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Gauges.LinearPointer.SymbolPointerStroke">
            <summary>
            Gets or sets the color of the symbol pointer.
            </summary>
            <example>
            using Syncfusion.UI.Xaml.Gauges;
            using Windows.UI;
            using Windows.UI.Xaml.Media;
            namespace GaugeSample
            {
                public sealed partial class LinearGauge
                {
                    public LinearGauge()
                    {
                        InitializeComponent();
                        SfLinearGauge linearGauge = new SfLinearGauge();
                        LinearPointer linearPointer = new LinearPointer();
                        linearPointer.Value = 25;
                        linearPointer.PointerType = LinearPointerType.SymbolPointer;
                        linearPointer.SymbolPointerStroke = new SolidColorBrush(Colors.Red);
                        linearGauge.MainScale = new LinearScale();
                        linearGauge.MainScale.Pointers.Add(linearPointer);
                        this.Layout.Children.Add(linearGauge);
                    }
                }   
            }
            </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Gauges.LinearPointer.SymbolPointerStyle">
            <summary>
            Gets or sets the style of the symbol pointer.
            </summary>
            <example>
            using Syncfusion.UI.Xaml.Gauges;
            namespace GaugeSample
            {
                public sealed partial class LinearGauge
                {
                    public LinearGauge()
                    {
                        InitializeComponent();
                        SfLinearGauge linearGauge = new SfLinearGauge();
                        LinearPointer linearPointer = new LinearPointer();
                        linearPointer.Value = 25;
                        linearPointer.PointerType = LinearPointerType.SymbolPointer;
                        linearPointer.SymbolPointerStyle = LinearSymbolPointerStyle.Triangle;
                        linearGauge.MainScale = new LinearScale();
                        linearGauge.MainScale.Pointers.Add(linearPointer);
                        this.Layout.Children.Add(linearGauge);
                    }
                }   
            }
            </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Gauges.LinearPointer.SymbolPointerTemplate">
            <summary>
            Gets or sets the template for customizing the symbol pointer.
            </summary>
            <remarks>
            To customize the symbol pointer SymbolPointerStyle of linear pointer should be
            set as Custom.
            </remarks>
            <example>
            using Syncfusion.UI.Xaml.Gauges;
            using Windows.UI.Xaml;
            namespace GaugeSample
            {
                public sealed partial class LinearGauge
                {
                    public LinearGauge()
                    {
                        InitializeComponent();
                        SfLinearGauge linearGauge = new SfLinearGauge();
                        LinearPointer linearPointer = new LinearPointer();
                        linearPointer.Value = 25;
                        linearPointer.PointerType = LinearPointerType.SymbolPointer;
                        linearPointer.SymbolPointerStyle = LinearSymbolPointerStyle.Custom;
                        linearPointer.SymbolPointerTemplate = this.Resources["EllipseSymbolTemplateKey"] as DataTemplate;
                        linearGauge.MainScale = new LinearScale();
                        linearGauge.MainScale.Pointers.Add(linearPointer);
                        this.Layout.Children.Add(linearGauge);
                    }
                }   
            }
            </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Gauges.LinearPointer.SymbolPointerPosition">
            <summary>
            Gets or sets the position of the symbol pointer.
            </summary>
            <example>
            using Syncfusion.UI.Xaml.Gauges;
            namespace GaugeSample
            {
                public sealed partial class LinearGauge
                {
                    public LinearGauge()
                    {
                        InitializeComponent();
                        SfLinearGauge linearGauge = new SfLinearGauge();
                        LinearPointer linearPointer = new LinearPointer();
                        linearPointer.Value = 25;
                        linearPointer.PointerType = LinearPointerType.SymbolPointer;
                        linearPointer.SymbolPointerPosition = LinearSymbolPointersPosition.Above;
                        linearGauge.MainScale = new LinearScale();
                        linearGauge.MainScale.Pointers.Add(linearPointer);
                        this.Layout.Children.Add(linearGauge);
                    }
                }   
            }
            </example>
        </member>
        <member name="T:Syncfusion.UI.Xaml.Gauges.LinearPointerCollection">
            <summary>
            Represents a collection of linear pointer. To render this, create an instance of the LinearPointerCollection class, and set required properties.
            </summary>
        </member>
        <member name="T:Syncfusion.UI.Xaml.Gauges.LinearRange">
            <summary>
             Represents LinearRange. To render this, create an instance of the LinearRange class, and set required properties.
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Gauges.LinearRange.#ctor">
            <summary>
            Initializes a new instance of the <see
            cref="T:Syncfusion.UI.Xaml.Gauges.LinearRange"/> class.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Gauges.LinearRange.StartWidthProperty">
            <summary>
            Using a DependencyProperty as the backing store for StartWidth.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Gauges.LinearRange.EndWidthProperty">
            <summary>
            Using a DependencyProperty as the backing store for EndWidth.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Gauges.LinearRange.RangeStrokeProperty">
            <summary>
            Using a DependencyProperty as the backing store for RangeStroke.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Gauges.LinearRange.RangeOpacityProperty">
            <summary>
            Using a DependencyProperty as the backing store for RangeOpacity.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Gauges.LinearRange.RangePositionFactorProperty">
            <summary>
            Using a DependencyProperty as the backing store for RangePositionFactor.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Gauges.LinearRange.StartValue">
            <summary>
            Gets or sets the start value of linear range.
            </summary>
            <example>
            using Syncfusion.UI.Xaml.Gauges;
            namespace GaugeSample
            {
                public sealed partial class LinearGauge
                {
                    public LinearGauge()
                    {
                        InitializeComponent();
                        SfLinearGauge linearGauge = new SfLinearGauge();
                        linearGauge.MainScale = new LinearScale();
                        linearGauge.MainScale.Ranges.Add(new LinearRange
                        {
                            StartValue = 0,
                            EndValue = 30
                        });
                        this.Layout.Children.Add(linearGauge);
                    }
                }   
            }
            </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Gauges.LinearRange.EndValue">
            <summary>
            Gets or sets the end value of linear range.
            </summary>
            <example>
            using Syncfusion.UI.Xaml.Gauges;
            namespace GaugeSample
            {
                public sealed partial class LinearGauge
                {
                    public LinearGauge()
                    {
                        InitializeComponent();
                        SfLinearGauge linearGauge = new SfLinearGauge();
                        linearGauge.MainScale = new LinearScale();
                        linearGauge.MainScale.Ranges.Add(new LinearRange
                        {
                            StartValue = 0,
                            EndValue = 30
                        });
                        this.Layout.Children.Add(linearGauge);
                    }
                }   
            }
            </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Gauges.LinearRange.StartWidth">
            <summary>
            Gets or sets the width of the starting portion of the linear range.
            </summary>
            <example>
            using Syncfusion.UI.Xaml.Gauges;
            namespace GaugeSample
            {
                public sealed partial class LinearGauge
                {
                    public LinearGauge()
                    {
                        InitializeComponent();
                        SfLinearGauge linearGauge = new SfLinearGauge();
                        linearGauge.MainScale = new LinearScale();
                        linearGauge.MainScale.Ranges.Add(new LinearRange
                        {
                            StartValue = 0,
                            EndValue = 30,
                            StartWidth = 10
                        });
                        this.Layout.Children.Add(linearGauge);
                    }
                }   
            }
            </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Gauges.LinearRange.EndWidth">
            <summary>
            Gets or sets the width of the ending portion of the linear range.
            </summary>
            <example>
            using Syncfusion.UI.Xaml.Gauges;
            namespace GaugeSample
            {
                public sealed partial class LinearGauge
                {
                    public LinearGauge()
                    {
                        InitializeComponent();
                        SfLinearGauge linearGauge = new SfLinearGauge();
                        linearGauge.MainScale = new LinearScale();
                        linearGauge.MainScale.Ranges.Add(new LinearRange
                        {
                            StartValue = 0,
                            EndValue = 30,
                            EndWidth = 10
                        });
                        this.Layout.Children.Add(linearGauge);
                    }
                }   
            }
            </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Gauges.LinearRange.RangeStroke">
            <summary>
            Gets or sets the color of the linear range.
            </summary>
            <example>
            using Syncfusion.UI.Xaml.Gauges;
            using Windows.UI;
            using Windows.UI.Xaml.Media;
            namespace GaugeSample
            {
                public sealed partial class LinearGauge
                {
                    public LinearGauge()
                    {
                        InitializeComponent();
                        SfLinearGauge linearGauge = new SfLinearGauge();
                        linearGauge.MainScale = new LinearScale();
                        linearGauge.MainScale.Ranges.Add(new LinearRange
                        {
                            StartValue = 0,
                            EndValue = 30,
                            RangeStroke = new SolidColorBrush(Colors.Yellow)
                        });
                        this.Layout.Children.Add(linearGauge);
                    }
                }   
            }
            </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Gauges.LinearRange.RangeOpacity">
            <summary>
            Gets or sets the opacity of the linear range.
            </summary>
            <example>
            using Syncfusion.UI.Xaml.Gauges;
            namespace GaugeSample
            {
                public sealed partial class LinearGauge
                {
                    public LinearGauge()
                    {
                        InitializeComponent();
                        SfLinearGauge linearGauge = new SfLinearGauge();
                        linearGauge.MainScale = new LinearScale();
                        linearGauge.MainScale.Ranges.Add(new LinearRange
                        {
                            StartValue = 0,
                            EndValue = 30,
                            RangeOpacity = 0.5
                        });
                        this.Layout.Children.Add(linearGauge);
                    }
                }   
            }
            </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Gauges.LinearRange.RangeOffset">
            <summary>
            Gets or sets the offset to have space between linear range and linear scale.
            </summary>
            <example>
            using Syncfusion.UI.Xaml.Gauges;
            namespace GaugeSample
            {
                public sealed partial class LinearGauge
                {
                    public LinearGauge()
                    {
                        InitializeComponent();
                        SfLinearGauge linearGauge = new SfLinearGauge();
                        linearGauge.MainScale = new LinearScale();
                        linearGauge.MainScale.Ranges.Add(new LinearRange
                        {
                            StartValue = 0,
                            EndValue = 30,
                            RangeOffset = 10
                        });
                        this.Layout.Children.Add(linearGauge);
                    }
                }   
            }
            </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Gauges.LinearRange.RangePositionFactor">
            <summary>
            Gets or sets the factor value to position Ranges based upon the scale.
            </summary>
            <remarks>
            It shows effect only if ElementsPosition of linear scale is set as Custom.
            </remarks>
            <example>
            using Syncfusion.UI.Xaml.Gauges;
            namespace GaugeSample
            {
                public sealed partial class LinearGauge
                {
                    public LinearGauge()
                    {
                        InitializeComponent();
                        SfLinearGauge linearGauge = new SfLinearGauge();
                        LinearRange linearRange = new LinearRange();
                        linearRange.Value = 25;
                        linearRange.RangePositionFactor = 0.5;
                        linearGauge.MainScale = new LinearScale();
                        linearGauge.MainScale.Ranges.Add(linearRange);
                        this.Layout.Children.Add(linearGauge);
                    }
                }   
            }
            </example>
        </member>
        <member name="T:Syncfusion.UI.Xaml.Gauges.LinearRangeCollection">
            <summary>
            Represents a collection of LinearRange
            </summary>
        </member>
        <member name="T:Syncfusion.UI.Xaml.Gauges.LinearScale">
            <summary>
             Represents linear scale. To render this scale, create an instance of the LinearScale class, and set required properties.
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Gauges.LinearScale.#ctor">
            <summary>
            Initializes a new instance of the <see
            cref="T:Syncfusion.UI.Xaml.Gauges.LinearScale"/> class.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Gauges.LinearScale.ScaleDirectionProperty">
            <summary>
            Using a DependencyProperty as the backing store for ScaleDirection.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Gauges.LinearScale.ScaleBarSizeProperty">
            <summary>
            Using a DependencyProperty as the backing store for ScaleBarSize.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Gauges.LinearScale.ScaleBarLengthProperty">
            <summary>
            Using a DependencyProperty as the backing store for ScaleBarLength.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Gauges.LinearScale.ScaleBarStrokeProperty">
            <summary>
            Using a DependencyProperty as the backing store for ScaleBarStroke.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Gauges.LinearScale.ScaleBarBorderBrushProperty">
            <summary>
            Using a DependencyProperty as the backing store for ScaleBarBorderBrush.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Gauges.LinearScale.ScaleBarBorderThicknessProperty">
            <summary>
            Using a DependencyProperty as the backing store for ScaleBarBorderThickness.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Gauges.LinearScale.ScaleBarPositionFactorProperty">
            <summary>
            Using a DependencyProperty as the backing store for ScaleBarPositionFactor.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Gauges.LinearScale.MinimumProperty">
            <summary>
            Using a DependencyProperty as the backing store for Minimum.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Gauges.LinearScale.MaximumProperty">
            <summary>
            Using a DependencyProperty as the backing store for Maximum.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Gauges.LinearScale.IntervalProperty">
            <summary>
            Using a DependencyProperty as the backing store for Interval.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Gauges.LinearScale.MinorTicksPerIntervalProperty">
            <summary>
            Using a DependencyProperty as the backing store for MinorTicksPerInterval.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Gauges.LinearScale.MajorTickSizeProperty">
            <summary>
            Using a DependencyProperty as the backing store for MajorTickSize.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Gauges.LinearScale.MinorTickSizeProperty">
            <summary>
            Using a DependencyProperty as the backing store for MinorTickSize.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Gauges.LinearScale.MajorTickStrokeThicknessProperty">
            <summary>
            Using a DependencyProperty as the backing store for MajorTickStrokeThickness.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Gauges.LinearScale.MinorTickStrokeThicknessProperty">
            <summary>
            Using a DependencyProperty as the backing store for MinorTickStrokeThickness.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Gauges.LinearScale.MajorTickStrokeProperty">
            <summary>
            Using a DependencyProperty as the backing store for MajorTickStroke.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Gauges.LinearScale.ElementsPositionModeProperty">
            <summary>
            Using a DependencyProperty as the backing store for ElementsPosition.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Gauges.LinearScale.TickPositionProperty">
            <summary>
            Using a DependencyProperty as the backing store for TickPosition.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Gauges.LinearScale.TickPositionFactorProperty">
            <summary>
            Using a DependencyProperty as the backing store for TickPositionFactor.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Gauges.LinearScale.RangePositionProperty">
            <summary>
            Using a DependencyProperty as the backing store for RangePosition.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Gauges.LinearScale.LabelPositionProperty">
            <summary>
            Using a DependencyProperty as the backing store for LabelPosition.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Gauges.LinearScale.LabelPositionFactorProperty">
            <summary>
            Using a DependencyProperty as the backing store for LabelPositionFactor.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Gauges.LinearScale.LabelTemplateProperty">
            <summary>
            Using a DependencyProperty as the backing store for LabelTemplate.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Gauges.LinearScale.LabelStrokeProperty">
            <summary>
            Using a DependencyProperty as the backing store for LabelStroke.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Gauges.LinearScale.LabelSizeProperty">
            <summary>
            Using a DependencyProperty as the backing store for LabelSize.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Gauges.LinearScale.LabelVisibilityProperty">
            <summary>
            Using a DependencyProperty as the backing store for LabelVisibility.  This enables the lables to get Visible or Collapsed etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Gauges.LinearScale.LabelOffsetProperty">
            <summary>
            Using a DependencyProperty as the backing store for LabelOffset.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Gauges.LinearScale.LabelFormatProperty">
            <summary>
            Using a DependencyProperty as the backing store for LabelFormat.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Gauges.LinearScale.PointersProperty">
            <summary>
            Using a DependencyProperty as the backing store for Pointers.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Gauges.LinearScale.RangesProperty">
            <summary>
            Using a DependencyProperty as the backing store for Ranges.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Gauges.LinearScale.BindRangeStrokeToLabelsProperty">
            <summary>
            Using a DependencyProperty as the backing store for BindRangeStrokeToLabels.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Gauges.LinearScale.BindRangeStrokeToTicksProperty">
            <summary>
            Using a DependencyProperty as the backing store for BindRangeStrokeToTicks.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Gauges.LinearScale.OnApplyTemplate">
            <summary>
            When overridden in a derived class, is invoked whenever application code or
            internal processes call <see
            cref="M:System.Windows.FrameworkElement.ApplyTemplate"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Gauges.LinearScale.Dispose">
            <summary>
            Method to release allocated resources of LinearScale.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Gauges.LinearScale.ScaleDirection">
            <summary>
            Gets or sets the direction of the linear scale.
            </summary>
            <example>
            using Syncfusion.UI.Xaml.Gauges;
            namespace GaugeSample
            {
                public sealed partial class LinearGauge
                {
                    public LinearGauge()
                    {
                        InitializeComponent();
                        SfLinearGauge linearGauge = new SfLinearGauge();
                        linearGauge.MainScale = new LinearScale();
                        linearGauge.MainScale.ScaleDirection =
            LinearScaleDirection.Backward;
                        this.Layout.Children.Add(linearGauge);
                    }
                }   
            }
            </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Gauges.LinearScale.ScaleBarSize">
            <summary>
            Gets or sets the size of the linear scale bar.
            </summary>
            <example>
            using Syncfusion.UI.Xaml.Gauges;
            namespace GaugeSample
            {
                public sealed partial class LinearGauge
                {
                    public LinearGauge()
                    {
                        InitializeComponent();
                        SfLinearGauge linearGauge = new SfLinearGauge();
                        linearGauge.MainScale = new LinearScale();
                        linearGauge.MainScale.ScaleBarSize = 50;
                        this.Layout.Children.Add(linearGauge);
                    }
                }   
            }
            </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Gauges.LinearScale.ScaleBarLength">
            <summary>
            Gets or sets the length of the linear scale bar.
            </summary>
            <example>
            using Syncfusion.UI.Xaml.Gauges;
            namespace GaugeSample
            {
                public sealed partial class LinearGauge
                {
                    public LinearGauge()
                    {
                        InitializeComponent();
                        SfLinearGauge linearGauge = new SfLinearGauge();
                        linearGauge.MainScale = new LinearScale();
                        linearGauge.MainScale.ScaleBarLength = 450;
                        this.Layout.Children.Add(linearGauge);
                    }
                }   
            }
            </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Gauges.LinearScale.ScaleBarStroke">
            <summary>
            Gets or sets the color of the linear scale bar.
            </summary>
            <example>
            using Syncfusion.UI.Xaml.Gauges;
            using Windows.UI;
            using Windows.UI.Xaml.Media;
            namespace GaugeSample
            {
                public sealed partial class LinearGauge
                {
                    public LinearGauge()
                    {
                        InitializeComponent();
                        SfLinearGauge linearGauge = new SfLinearGauge();
                        linearGauge.MainScale = new LinearScale();
                        linearGauge.MainScale.ScaleBarStroke = new
            SolidColorBrush(Colors.Gray);
                        this.Layout.Children.Add(linearGauge);
                    }
                }   
            }
            </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Gauges.LinearScale.ScaleBarBorderBrush">
            <summary>
            Gets or sets the border color of the linear scale bar.
            </summary>
            <example>
            using Syncfusion.UI.Xaml.Gauges;
            using Windows.UI;
            using Windows.UI.Xaml.Media;
            namespace GaugeSample
            {
                public sealed partial class LinearGauge
                {
                    public LinearGauge()
                    {
                        InitializeComponent();
                        SfLinearGauge linearGauge = new SfLinearGauge();
                        linearGauge.MainScale = new LinearScale();
                        linearGauge.MainScale.ScaleBarBorderBrush = new
            SolidColorBrush(Colors.Red);
                        this.Layout.Children.Add(linearGauge);
                    }
                }   
            }
            </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Gauges.LinearScale.ScaleBarBorderThickness">
            <summary>
            Gets or sets the border thickness of the linear scale bar.
            </summary>
            <example>
            using Syncfusion.UI.Xaml.Gauges;
            using Windows.UI.Xaml;
            namespace GaugeSample
            {
                public sealed partial class LinearGauge
                {
                    public LinearGauge()
                    {
                        InitializeComponent();
                        SfLinearGauge linearGauge = new SfLinearGauge();
                        linearGauge.MainScale = new LinearScale();
                        linearGauge.MainScale.ScaleBarBorderThickness = new Thickness(2);
                        this.Layout.Children.Add(linearGauge);
                    }
                }   
            }
            </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Gauges.LinearScale.ScaleBarPositionFactor">
            <summary>
            Gets or sets the factor value to position ScaleBars based upon the scale.
            </summary>
            <remarks>
            It shows effect only if ElementsPosition of linear scale is set as Custom.
            </remarks>
            <example>
            using Syncfusion.UI.Xaml.Gauges;
            namespace GaugeSample
            {
                public sealed partial class LinearGauge
                {
                    public LinearGauge()
                    {
                        InitializeComponent();
                        SfLinearGauge linearGauge = new SfLinearGauge();
                        linearGauge.MainScale = new LinearScale();
                        linearGauge.MainScale.ScaleBarSize = 10;
                        this.Layout.Children.Add(linearGauge);
                    }
                }   
            }
            </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Gauges.LinearScale.Minimum">
            <summary>
            Gets or sets the minimum value of the linear scale
            </summary>
            <example>
            using Syncfusion.UI.Xaml.Gauges;
            namespace GaugeSample
            {
                public sealed partial class LinearGauge
                {
                    public LinearGauge()
                    {
                        InitializeComponent();
                        SfLinearGauge linearGauge = new SfLinearGauge();
                        linearGauge.MainScale = new LinearScale();
                        linearGauge.MainScale.Minimum = 10;
                        this.Layout.Children.Add(linearGauge);
                    }
                }   
            }
            </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Gauges.LinearScale.Maximum">
            <summary>
            Gets or sets the maximum value of the linear scale
            </summary>
            <example>
            using Syncfusion.UI.Xaml.Gauges;
            namespace GaugeSample
            {
                public sealed partial class LinearGauge
                {
                    public LinearGauge()
                    {
                        InitializeComponent();
                        SfLinearGauge linearGauge = new SfLinearGauge();
                        linearGauge.MainScale = new LinearScale();
                        linearGauge.MainScale.Maximum = 90;
                        this.Layout.Children.Add(linearGauge);
                    }
                }   
            }
            </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Gauges.LinearScale.Interval">
            <summary>
            Gets or sets the interval for major ticks in the linear scale.
            </summary>
            <example>
            using Syncfusion.UI.Xaml.Gauges;
            namespace GaugeSample
            {
                public sealed partial class LinearGauge
                {
                    public LinearGauge()
                    {
                        InitializeComponent();
                        SfLinearGauge linearGauge = new SfLinearGauge();
                        linearGauge.MainScale = new LinearScale();
                        linearGauge.MainScale.Interval = 20;
                        this.Layout.Children.Add(linearGauge);
                    }
                }   
            }
            </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Gauges.LinearScale.MinorTicksPerInterval">
            <summary>
            Gets or sets the number of minor ticks that has to be placed in-between the
            major ticks in the linear scale.
            </summary>
            <example>
            using Syncfusion.UI.Xaml.Gauges;
            namespace GaugeSample
            {
                public sealed partial class LinearGauge
                {
                    public LinearGauge()
                    {
                        InitializeComponent();
                        SfLinearGauge linearGauge = new SfLinearGauge();
                        linearGauge.MainScale = new LinearScale();
                        linearGauge.MainScale.MinorTicksPerInterval = 3;
                        this.Layout.Children.Add(linearGauge);
                    }
                }   
            }
            </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Gauges.LinearScale.MajorTickSize">
            <summary>
            Gets or sets the length of major ticks in the linear scale.
            </summary>
            <example>
            using Syncfusion.UI.Xaml.Gauges;
            namespace GaugeSample
            {
                public sealed partial class LinearGauge
                {
                    public LinearGauge()
                    {
                        InitializeComponent();
                        SfLinearGauge linearGauge = new SfLinearGauge();
                        linearGauge.MainScale = new LinearScale();
                        linearGauge.MainScale.MajorTickSize = 10;
                        this.Layout.Children.Add(linearGauge);
                    }
                }   
            }
            </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Gauges.LinearScale.MinorTickSize">
            <summary>
            Gets or sets the length of minor ticks in the linear scale.
            </summary>
            <example>
            using Syncfusion.UI.Xaml.Gauges;
            namespace GaugeSample
            {
                public sealed partial class LinearGauge
                {
                    public LinearGauge()
                    {
                        InitializeComponent();
                        SfLinearGauge linearGauge = new SfLinearGauge();
                        linearGauge.MainScale = new LinearScale();
                        linearGauge.MainScale.MinorTickSize = 10;
                        this.Layout.Children.Add(linearGauge);
                    }
                }   
            }
            </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Gauges.LinearScale.MajorTickStrokeThickness">
            <summary>
            Gets or sets the thickness of the major ticks in the linear scale.
            </summary>
            <example>
            using Syncfusion.UI.Xaml.Gauges;
            namespace GaugeSample
            {
                public sealed partial class LinearGauge
                {
                    public LinearGauge()
                    {
                        InitializeComponent();
                        SfLinearGauge linearGauge = new SfLinearGauge();
                        linearGauge.MainScale = new LinearScale();
                        linearGauge.MainScale.MajorTickStrokeThickness = 4;
                        this.Layout.Children.Add(linearGauge);
                    }
                }   
            }
            </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Gauges.LinearScale.MinorTickStrokeThickness">
            <summary>
            Gets or sets the thickness of the minor ticks in the linear scale.
            </summary>
            <example>
            using Syncfusion.UI.Xaml.Gauges;
            namespace GaugeSample
            {
                public sealed partial class LinearGauge
                {
                    public LinearGauge()
                    {
                        InitializeComponent();
                        SfLinearGauge linearGauge = new SfLinearGauge();
                        linearGauge.MainScale = new LinearScale();
                        linearGauge.MainScale.MinorTickStrokeThickness = 4;
                        this.Layout.Children.Add(linearGauge);
                    }
                }   
            }
            </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Gauges.LinearScale.MajorTickStroke">
            <summary>
            Gets or sets the color of the major ticks in the linear scale.
            </summary>
            <example>
            using Syncfusion.UI.Xaml.Gauges;
            using Windows.UI;
            using Windows.UI.Xaml.Media;
            namespace GaugeSample
            {
                public sealed partial class LinearGauge
                {
                    public LinearGauge()
                    {
                        InitializeComponent();
                        SfLinearGauge linearGauge = new SfLinearGauge();
                        linearGauge.MainScale = new LinearScale();
                        linearGauge.MainScale.MajorTickStroke = new SolidColorBrush(Colors.Green);
                        this.Layout.Children.Add(linearGauge);
                    }
                }   
            }
            </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Gauges.LinearScale.MinorTickStroke">
            <summary>
            Gets or sets the color of the minor ticks in the linear scale.
            </summary>
            <example>
            using Syncfusion.UI.Xaml.Gauges;
            using Windows.UI;
            using Windows.UI.Xaml.Media;
            namespace GaugeSample
            {
                public sealed partial class LinearGauge
                {
                    public LinearGauge()
                    {
                        InitializeComponent();
                        SfLinearGauge linearGauge = new SfLinearGauge();
                        linearGauge.MainScale = new LinearScale();
                        linearGauge.MainScale.MinorTickStroke = new SolidColorBrush(Colors.Orange);
                        this.Layout.Children.Add(linearGauge);
                    }
                }   
            }
            </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Gauges.LinearScale.ElementsPositionMode">
            <summary>
            Gets or sets the position of elements with respect to the linear scale.
            </summary>
            <example>
            using Syncfusion.UI.Xaml.Gauges;
            namespace GaugeSample
            {
                public sealed partial class LinearGauge
                {
                    public LinearGauge()
                    {
                        InitializeComponent();
                        SfLinearGauge linearGauge = new SfLinearGauge();
                        linearGauge.MainScale = new LinearScale();
                        linearGauge.MainScale.ElementPosition = LinearScalePositionModes.Custom;
                        this.Layout.Children.Add(linearGauge);
                    }
                }   
            }
            </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Gauges.LinearScale.TickPosition">
            <summary>
            Gets or sets the position of ticks with respect to the linear scale.
            </summary>
            <example>
            using Syncfusion.UI.Xaml.Gauges;
            namespace GaugeSample
            {
                public sealed partial class LinearGauge
                {
                    public LinearGauge()
                    {
                        InitializeComponent();
                        SfLinearGauge linearGauge = new SfLinearGauge();
                        linearGauge.MainScale = new LinearScale();
                        linearGauge.MainScale.TickPosition = LinearTicksPosition.Above;
                        this.Layout.Children.Add(linearGauge);
                    }
                }   
            }
            </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Gauges.LinearScale.TickPositionFactor">
            <summary>
            Gets or sets the factor value to position ticks based upon the scale.
            </summary>
            <remarks>
            It shows effect only if ElementsPosition of linear scale is set as Custom.
            </remarks>
            <example>
            using Syncfusion.UI.Xaml.Gauges;
            namespace GaugeSample
            {
                public sealed partial class LinearGauge
                {
                    public LinearGauge()
                    {
                        InitializeComponent();
                        SfLinearGauge linearGauge = new SfLinearGauge();
                        linearGauge.MainScale = new LinearScale();
                        linearGauge.MainScale.TickSize = 10;
                        this.Layout.Children.Add(linearGauge);
                    }
                }   
            }
            </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Gauges.LinearScale.RangePosition">
            <summary>
            Gets or sets the position of ranges with respect to the linear scale.
            </summary>
            <example>
            using Syncfusion.UI.Xaml.Gauges;
            namespace GaugeSample
            {
                public sealed partial class LinearGauge
                {
                    public LinearGauge()
                    {
                        InitializeComponent();
                        SfLinearGauge linearGauge = new SfLinearGauge();
                        linearGauge.MainScale = new LinearScale();
                        linearGauge.MainScale.RangePosition = LinearRangesPosition.Below;
                        this.Layout.Children.Add(linearGauge);
                    }
                }   
            }
            </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Gauges.LinearScale.LabelPosition">
            <summary>
            Gets or sets the position of labels with respect to the linear scale.
            </summary>
            <example>
            using Syncfusion.UI.Xaml.Gauges;
            namespace GaugeSample
            {
                public sealed partial class LinearGauge
                {
                    public LinearGauge()
                    {
                        InitializeComponent();
                        SfLinearGauge linearGauge = new SfLinearGauge();
                        linearGauge.MainScale = new LinearScale();
                        linearGauge.MainScale.LabelPosition = LinearLabelsPosition.Above;
                        this.Layout.Children.Add(linearGauge);
                    }
                }   
            }
            </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Gauges.LinearScale.LabelPositionFactor">
            <summary>
            Gets or sets the factor value to position labels based upon the scale.
            </summary>
            <remarks>
            It shows effect only if ElementsPosition of linear scale is set as Custom.
            </remarks>
            <example>
            using Syncfusion.UI.Xaml.Gauges;
            namespace GaugeSample
            {
                public sealed partial class LinearGauge
                {
                    public LinearGauge()
                    {
                        InitializeComponent();
                        SfLinearGauge linearGauge = new SfLinearGauge();
                        linearGauge.MainScale = new LinearScale();
                        linearGauge.MainScale.LabelPositionFactor = 0.5;
                        this.Layout.Children.Add(linearGauge);
                    }
                }   
            }
            </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Gauges.LinearScale.LabelTemplate">
            <summary>
            Gets or sets the template for labels in the linear scale.
            </summary>
            <example>
            using Syncfusion.UI.Xaml.Gauges;
            namespace GaugeSample
            {
                public sealed partial class LinearGauge
                {
                    public LinearGauge()
                    {
                        InitializeComponent();
                        SfLinearGauge linearGauge = new SfLinearGauge();
                        linearGauge.MainScale = new LinearScale();
                        linearGauge.MainScale.LabelTemplate = this.Resources["DefaultLabelTemplate"] as DataTemplate;
                        this.Layout.Children.Add(linearGauge);
                    }
                }   
            }
            </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Gauges.LinearScale.LabelStroke">
            <summary>
            Gets or sets the color of the labels in the linear scale.
            </summary>
            <example>
            using Syncfusion.UI.Xaml.Gauges;
            using Windows.UI;
            using Windows.UI.Xaml.Media;
            namespace GaugeSample
            {
                public sealed partial class LinearGauge
                {
                    public LinearGauge()
                    {
                        InitializeComponent();
                        SfLinearGauge linearGauge = new SfLinearGauge();
                        linearGauge.MainScale = new LinearScale();
                        linearGauge.MainScale.LabelStroke = new
            SolidColorBrush(Colors.Blue);
                        this.Layout.Children.Add(linearGauge);
                    }
                }   
            }
            </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Gauges.LinearScale.LabelSize">
            <summary>
            Gets or sets the font size of the labels in the linear scale.
            </summary>
            <example>
            using Syncfusion.UI.Xaml.Gauges;
            namespace GaugeSample
            {
                public sealed partial class LinearGauge
                {
                    public LinearGauge()
                    {
                        InitializeComponent();
                        SfLinearGauge linearGauge = new SfLinearGauge();
                        linearGauge.MainScale = new LinearScale();
                        linearGauge.MainScale.LabelSize = 12;
                        this.Layout.Children.Add(linearGauge);
                    }
                }   
            }
            </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Gauges.LinearScale.LabelVisibility">
            <summary>
            Gets or sets the visibility of the labels in the linear scale.
            </summary>
            <example>
            using Syncfusion.UI.Xaml.Gauges;
            namespace GaugeSample
            {
                public sealed partial class LinearGauge
                {
                    public LinearGauge()
                    {
                        InitializeComponent();
                        SfLinearGauge linearGauge = new SfLinearGauge();
                        linearGauge.MainScale = new LinearScale();
                        linearGauge.MainScale.LabelSize = 12;
                        linearGauge.MainScale.LabelVisibility=Visibility.Visible;
                        this.Layout.Children.Add(linearGauge);
                    }
                }   
            }
            </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Gauges.LinearScale.LabelOffset">
            <summary>
            Gets or sets the offset value to show space between ticks and labels.
            </summary>
            <example>
            using Syncfusion.UI.Xaml.Gauges;
            namespace GaugeSample
            {
                public sealed partial class LinearGauge
                {
                    public LinearGauge()
                    {
                        InitializeComponent();
                        SfLinearGauge linearGauge = new SfLinearGauge();
                        linearGauge.MainScale = new LinearScale();
                        linearGauge.MainScale.LabelOffset = 5;
                        this.Layout.Children.Add(linearGauge);
                    }
                }   
            }
            </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Gauges.LinearScale.LabelFormat">
            <summary>
            Gets or sets the format for labels in the linear scale.
            </summary>
            <example>
            using Syncfusion.UI.Xaml.Gauges;
            namespace GaugeSample
            {
                public sealed partial class LinearGauge
                {
                    public LinearGauge()
                    {
                        InitializeComponent();
                        SfLinearGauge linearGauge = new SfLinearGauge();
                        linearGauge.MainScale = new LinearScale();
                        linearGauge.MainScale.LabelFormat = "$ #";
                        this.Layout.Children.Add(linearGauge);
                    }
                }   
            }
            </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Gauges.LinearScale.Pointers">
            <summary>
            Gets or sets the collection of linear pointers.
            </summary>
            <example>
            using Syncfusion.UI.Xaml.Gauges;
            namespace GaugeSample
            {
                public sealed partial class LinearGauge
                {
                    public LinearGauge()
                    {
                        InitializeComponent();
                        SfLinearGauge linearGauge = new SfLinearGauge();
                        linearGauge.MainScale = new LinearScale();
                        linearGauge.MainScale.Pointers.Add(new LinearPointer() { Value = 30 });
                        this.Layout.Children.Add(linearGauge);
                    }
                }   
            }
            </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Gauges.LinearScale.Ranges">
            <summary>
            Gets or sets the collection of linear ranges.
            </summary>
            <example>
            using Syncfusion.UI.Xaml.Gauges;
            namespace GaugeSample
            {
                public sealed partial class LinearGauge
                {
                    public LinearGauge()
                    {
                        InitializeComponent();
                        SfLinearGauge linearGauge = new SfLinearGauge();
                        linearGauge.MainScale = new LinearScale();
                        linearGauge.MainScale.Ranges.Add(new LinearRange() { StartValue = 0, EndValue = 30 });
                        this.Layout.Children.Add(linearGauge);
                    }
                }   
            }
            </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Gauges.LinearScale.BindRangeStrokeToLabels">
            <summary>
            Gets or sets a value indicating whether the color of labels should be similar to
            the color of ranges.
            </summary>
            <example>
            using Syncfusion.UI.Xaml.Gauges;
            namespace GaugeSample
            {
                public sealed partial class LinearGauge
                {
                    public LinearGauge()
                    {
                        InitializeComponent();
                        SfLinearGauge linearGauge = new SfLinearGauge();
                        linearGauge.MainScale = new LinearScale();
                        linearGauge.MainScale.Ranges.Add(new LinearRange() { StartValue = 0, EndValue = 30 });
                        linearGauge.MainScale.BindRangeStrokeToLabels = true;
                        this.Layout.Children.Add(linearGauge);
                    }
                }   
            }
            </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Gauges.LinearScale.BindRangeStrokeToTicks">
            <summary>
            Gets or sets a value indicating whether the color of ticks should be similar to
            the color of ranges.
            </summary>
            <example>
            using Syncfusion.UI.Xaml.Gauges;
            namespace GaugeSample
            {
                public sealed partial class LinearGauge
                {
                    public LinearGauge()
                    {
                        InitializeComponent();
                        SfLinearGauge linearGauge = new SfLinearGauge();
                        linearGauge.MainScale = new LinearScale();
                        linearGauge.MainScale.Ranges.Add(new LinearRange() { StartValue = 0, EndValue = 30 });
                        linearGauge.MainScale.BindRangeStrokeToTicks = true;
                        this.Layout.Children.Add(linearGauge);
                    }
                }   
            }
            </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Gauges.LinearScale.LabelPostfix">
            <summary>
            Gets or sets the LabelPostfix value that can attached at the end of the labels.
            </summary>
            <remarks>
            Used to add some extentions to the labels like % symbol can be added to labels
            while displaying the percentage values in SfLinearGauge.
            </remarks>
            <value>
            string
            </value>
              /// <example>
            using Syncfusion.UI.Xaml.Gauges;
            using Windows.UI;
            using Windows.UI.Xaml.Media;
            namespace GaugeSample
            {
                public sealed partial class LinearGauge
                {
                    public LinearGauge()
                    {
                        InitializeComponent();
                        SfLinearGauge linearGauge = new SfLinearGauge();
                        linearGauge.MainScale = new LinearScale();
                        linearGauge.MainScale.LabelStroke = new
                        SolidColorBrush(Colors.Blue);
                        linearGauge.MainScale.LabelPostfix="%";
                        this.Layout.Children.Add(linearGauge);
                    }
                }   
            }
            </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Gauges.LinearScale.LabelPrefix">
            <summary>
            Gets or sets the LabelPrefix value that can be added before the labels.
            </summary>
            <remarks>
            Used to add some prefix to the labels like $ symbol can be added to labels
            while displaying the dollar values in SfLinearGauge.
            </remarks>
            <value>
            string
            </value>
             ///   /// <example>
            using Syncfusion.UI.Xaml.Gauges;
            using Windows.UI;
            using Windows.UI.Xaml.Media;
            namespace GaugeSample
            {
                public sealed partial class LinearGauge
                {
                    public LinearGauge()
                    {
                        InitializeComponent();
                        SfLinearGauge linearGauge = new SfLinearGauge();
                        linearGauge.MainScale = new LinearScale();
                        linearGauge.MainScale.LabelStroke = new
                        SolidColorBrush(Colors.Blue);
                        linearGauge.MainScale.LabelPrefix="$";
                        this.Layout.Children.Add(linearGauge);
                    }
                }   
            }
            </example>
        </member>
        <member name="T:Syncfusion.UI.Xaml.Gauges.LinearScaleLabel">
            <summary>
            Represents LinearScaleLabel. To render this, create an instance of the LinearScaleLabel class, and set required properties.
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Gauges.LinearScaleLabel.#ctor">
            <summary>
            Initializes a new instance of the <see
            cref="T:Syncfusion.UI.Xaml.Gauges.LinearScaleLabel"/> class.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Gauges.LinearScaleLabel.LabelStrokeProperty">
            <summary>
            Using a DependencyProperty as the backing store for LabelStroke.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Gauges.LinearScaleLabel.LabelSizeProperty">
            <summary>
            Using a DependencyProperty as the backing store for LabelSize.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Gauges.LinearScaleLabel.LabelValueProperty">
            <summary>
            Using a DependencyProperty as the backing store for LabelValue.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Gauges.LinearScaleLabel.LabelFormatProperty">
            <summary>
            Using a DependencyProperty as the backing store for LabelFormat.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Gauges.LinearScaleLabel.LabelDirectionProperty">
            <summary>
            Using a DependencyProperty as the backing store for LabelDirection.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Gauges.LinearScaleLabel.LabelTemplateProperty">
            <summary>
            Using a DependencyProperty as the backing store for LabelTemplate.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Gauges.LinearScaleLabel.LabelStroke">
            <summary>
            Gets or sets the color of labels in the linear scale.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Gauges.LinearScaleLabel.LabelSize">
            <summary>
            Gets or sets the font size of labels in the linear scale.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Gauges.LinearScaleLabel.LabelValue">
            <summary>
            Gets or sets the formatted label in the linear scale.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Gauges.LinearScaleLabel.LabelFormat">
            <summary>
            Gets or set the format to format the label content.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Gauges.LinearScaleLabel.LabelDirection">
            <summary>
            Gets or sets the direction in which label has to be displayed.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Gauges.LinearScaleLabel.LabelTemplate">
            <summary>
            Gets or sets the template for customizing the label.
            </summary>
        </member>
        <member name="T:Syncfusion.UI.Xaml.Gauges.LinearScaleLabelCollection">
            <summary>
            Represents the collection of linear scale labels.
            </summary>
        </member>
        <member name="T:Syncfusion.UI.Xaml.Gauges.LinearScaleTick">
            <summary>
            Represents the ticks in the linear scale. To render this, create an instance of the <see cref="T:Syncfusion.UI.Xaml.Gauges.LinearScaleTick"/> class, and set required properties.
            Represents the ticks in the linear scale. To render this, create an instance of the <see cref="T:Syncfusion.UI.Xaml.Gauges.LinearScaleTick"/> class, and set required properties.
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Gauges.LinearScaleTick.#ctor">
            <summary>
            Initializes a new instance of the <see
            cref="T:Syncfusion.UI.Xaml.Gauges.LinearScaleTick"/> class.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Gauges.LinearScaleTick.TickLengthProperty">
            <summary>
            using a DependencyProperty as backing store for TickLength. This enables animation,styling,binding,etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Gauges.LinearScaleTick.TickStrokeProperty">
            <summary>
             using a DependencyProperty as backing store for TickStroke. This enables animation,styling,binding,etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Gauges.LinearScaleTick.TickStrokeThicknessProperty">
            <summary>
            Using a DependencyProperty as the backing store for TickStrokeThickness.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Gauges.LinearScaleTick.TickPositionProperty">
            <summary>
            Using a DependencyProperty as the backing store for TickPosition.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Gauges.LinearScaleTick.TickTemplateProperty">
            <summary>
            Using a DependencyProperty as the backing store for TickTemplate.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Gauges.LinearScaleTick.TickContentProperty">
            <summary>
            Using a DependencyProperty as the backing store for TickContent.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Gauges.LinearScaleTick.TickLength">
            <summary>
            Gets or sets the length of ticks in the linear scale.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Gauges.LinearScaleTick.TickStroke">
            <summary>
            Gets or sets the stroke of ticks in the linear scale.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Gauges.LinearScaleTick.TickStrokeThickness">
            <summary>
            Gets or sets the thickness of ticks in the linear scale.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Gauges.LinearScaleTick.TickPosition">
            <summary>
            Gets or sets the position to arrange ticks in linear scale.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Gauges.LinearScaleTick.TickTemplate">
            <summary>
            Gets or sets the template for customizing the Tick.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Gauges.LinearScaleTick.TickContent">
            <summary>
            Gets or sets the content for customizing the Tick.
            </summary>
        </member>
        <member name="T:Syncfusion.UI.Xaml.Gauges.LinearScaleTickCollection">
            <summary>
            Represents LinearScaleTickCollection. To render this, create an instance of the LinearScaleTickCollection class, and set required properties.
            </summary>
        </member>
        <member name="T:Syncfusion.UI.Xaml.Gauges.DependencyObjectExtensions">
            <summary>
            Represents an extension to find the parent of an element. It is used to represent an object that participates in the dependency property.
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Gauges.DependencyObjectExtensions.FindElementOfType``1(System.Windows.FrameworkElement)">
            <summary>
                Searches the sub tree of an element (including that element) 
                for an element of a particular type.
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Gauges.DependencyObjectExtensions.FindElementOfTypeWithName``1(System.Windows.FrameworkElement,System.String)">
            <summary>
                Searches the sub tree of an element (including that element) 
                for an element of a particular type.
            </summary>
        </member>
        <member name="T:XamlGeneratedNamespace.GeneratedInternalTypeHelper">
            <summary>
            GeneratedInternalTypeHelper
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.CreateInstance(System.Type,System.Globalization.CultureInfo)">
            <summary>
            CreateInstance
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.GetPropertyValue(System.Reflection.PropertyInfo,System.Object,System.Globalization.CultureInfo)">
            <summary>
            GetPropertyValue
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.SetPropertyValue(System.Reflection.PropertyInfo,System.Object,System.Object,System.Globalization.CultureInfo)">
            <summary>
            SetPropertyValue
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.CreateDelegate(System.Type,System.Object,System.String)">
            <summary>
            CreateDelegate
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.AddEventHandler(System.Reflection.EventInfo,System.Object,System.Delegate)">
            <summary>
            AddEventHandler
            </summary>
        </member>
    </members>
</doc>
